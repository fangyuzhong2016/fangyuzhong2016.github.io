<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>个人博客www.fangyuzhong.com 地址变更</title>
    <link href="/2019/06/25/frist-start/"/>
    <url>/2019/06/25/frist-start/</url>
    
    <content type="html"><![CDATA[<h2 id="个人博客www-fangyuzhong-com-地址变更，更多精彩内容，敬请期待"><a href="#个人博客www-fangyuzhong-com-地址变更，更多精彩内容，敬请期待" class="headerlink" title="个人博客www.fangyuzhong.com 地址变更，更多精彩内容，敬请期待"></a>个人博客<a href="http://www.fangyuzhong.com/">www.fangyuzhong.com</a> 地址变更，更多精彩内容，敬请期待</h2><p>个人博客<a href="http://www.fangyuzhong.com目前托管的阿里云虚拟机即将到期,后续将不再使用虚拟机托管,博客www.fangyuzhong.com/">www.fangyuzhong.com目前托管的阿里云虚拟机即将到期，后续将不再使用虚拟机托管，博客www.fangyuzhong.com</a> 全部内容将迁移到 <a href="https://fangyuzhong2016.github.io/">这里</a>后续域名 <a href="http://www.fangyuzhong.com/">www.fangyuzhong.com</a>  也会解析到 <a href="https://fangyuzhong2016.github.io/">https://fangyuzhong2016.github.io</a> 。由此带来的不便，深表歉意！ </p><p>更多精彩内容，敬请期待！</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>www.fangyuzhong.com</tag>
      
      <tag>新 https://fangyuzhong2016.github.io</tag>
      
      <tag>博客迁移</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HadoopIntellijPlugin插件HDFS文件系统常用操作类</title>
    <link href="/2017/08/05/IntellijPluginHadoop/011-IntellijPluginHadoop/"/>
    <url>/2017/08/05/IntellijPluginHadoop/011-IntellijPluginHadoop/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本节介绍一下使用Hadoop的Java的API进行HDFS的相关操作，包括判断目录、文件是否存在；获目录、文件的ACL权限；获取目录或文件的属性信息；下载目录或文件；上传目录或文件等等。这里我就不做详细分析了，贴出整个类的代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HDFS文件操作工具类</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-27.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HDFSUtil</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     定义文件读取的缓冲区长度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> BUFFERSIZE=<span class="hljs-number">4096</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断目录是否存在</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strPath 目录路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileSystem 文件系统</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 存在返回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">dirExists</span><span class="hljs-params">(String strPath,FileSystem fileSystem)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> fileSystem.getFileStatus(<span class="hljs-keyword">new</span> Path(strPath)).isDirectory();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断文件是否存在</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strPath 文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileSystem 文件系统</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 存在返回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">fileExists</span><span class="hljs-params">(String strPath,FileSystem fileSystem)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> fileSystem.getFileStatus(<span class="hljs-keyword">new</span> Path(strPath)).isFile();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *获取指定目录或者文件的ACL权限对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileSystem</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strDirPath</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strUserName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FsAction <span class="hljs-title">getDirFileActionByUser</span><span class="hljs-params">(FileSystem fileSystem,String strDirPath,String strUserName)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Path path = <span class="hljs-keyword">new</span> Path(strDirPath);<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            AclStatus aclStatus= fileSystem.getAclStatus(path);<br>            <span class="hljs-keyword">if</span>(aclStatus.getOwner().equals(strUserName))<br>            &#123;<br>               <span class="hljs-keyword">return</span> aclStatus.getPermission().getUserAction();<br>            &#125;<br>            List&lt;AclEntry&gt; aclEntries= aclStatus.getEntries();<br>            <span class="hljs-keyword">for</span>(AclEntry aclEntry:aclEntries)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(aclEntry.getType()== AclEntryType.USER)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(aclEntry.getName().equals(strUserName))<br>                    &#123;<br>                       <span class="hljs-keyword">return</span> aclEntry.getPermission();<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span>  aclStatus.getPermission().getOtherAction();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException ex)<br>        &#123;<br>            <span class="hljs-keyword">return</span>  <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统的相关信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileStatus</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title">getFileSystemInformation</span><span class="hljs-params">(FileStatus fileStatus)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Map&lt;String, String&gt; fileSystemInformations = <span class="hljs-keyword">new</span> TreeMap();<br>        ResourceBundle resourceBundle = LocaleLanguageManager.getInstance().getResourceBundle();<br>        <span class="hljs-keyword">if</span> (fileStatus.isDirectory())<br>        &#123;<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.DIRECTORYPATH), fileStatus.getPath().toString());<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.DIRECTORYOWNER), fileStatus.getOwner());<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.DIRECTORYPERMISSION), fileStatus.getPermission().toString());<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.DIRECTORYGROUP), fileStatus.getGroup());<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.DIRECTORYMODIFICATIONTIME), <span class="hljs-keyword">new</span> Timestamp(fileStatus.getModificationTime()).toString());<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.DIRECTORYACCESSTIME), <span class="hljs-keyword">new</span> Timestamp(fileStatus.getAccessTime()).toString());<br>        &#125; <span class="hljs-keyword">else</span><br>        &#123;<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.FILEPATH), fileStatus.getPath().toString());<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.FILELEN), FormatUtil.sizeFormatNum2String(fileStatus.getLen()));<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.FILEREPLICATION), <span class="hljs-keyword">new</span> Short(fileStatus.getReplication()).toString());<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.FILEBLOCKSIZE), FormatUtil.sizeFormatNum2String(fileStatus.getBlockSize()));<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.FILEOWNER), fileStatus.getOwner());<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.FILEGROUP), fileStatus.getGroup());<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.FILEPERMISSION), fileStatus.getPermission().toString());<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.FILEMODIFICATIONTIME), <span class="hljs-keyword">new</span> Timestamp(fileStatus.getModificationTime()).toString());<br>            fileSystemInformations.put(resourceBundle.getString(LanguageKeyWord.FILEACCESSTIME), <span class="hljs-keyword">new</span> Timestamp(fileStatus.getAccessTime()).toString());<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> fileSystemInformations;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strhdfspath       HDFS中选中的单个文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strLocalPath      下载要保存到本地的文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileSystem        HDFS文件系统对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> progressIndicator IDEA进度对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否下载成功</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(String strhdfspath, String strLocalPath, FileSystem fileSystem,</span></span><br><span class="hljs-function"><span class="hljs-params">                                                ProgressIndicator progressIndicator)</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br>        OutputStream out = <span class="hljs-keyword">null</span>;<br>        InputStream in = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            progressIndicator.setIndeterminate(<span class="hljs-keyword">false</span>);<span class="hljs-comment">//确定进度</span><br>            String fileName = strhdfspath.trim().substring(strhdfspath.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>) + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//事先获取文件的大小</span><br>            <span class="hljs-keyword">long</span> fileSize = fileSystem.getFileStatus(<span class="hljs-keyword">new</span> Path(strhdfspath)).getLen() / <span class="hljs-number">1024L</span>;<br>            <span class="hljs-keyword">int</span> pageSize = (<span class="hljs-keyword">int</span>) Math.ceil(fileSize / <span class="hljs-number">100.00</span>);<span class="hljs-comment">//进度条进度设置100</span><br>            in = fileSystem.open(<span class="hljs-keyword">new</span> Path(strhdfspath), <span class="hljs-number">0</span>);<br>            out = <span class="hljs-keyword">new</span> FileOutputStream(strLocalPath + <span class="hljs-string">&quot;/&quot;</span> + fileName);<br>            PrintStream ps = out <span class="hljs-keyword">instanceof</span> PrintStream ? (PrintStream) out : <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[HDFSUtil.BUFFERSIZE];<br>            <span class="hljs-keyword">long</span> count = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> progressCount = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> bytesRead = in.read(buf); bytesRead &gt;= <span class="hljs-number">0</span>; bytesRead = in.read(buf))<br>            &#123;<br>                count++;<br>                <span class="hljs-keyword">if</span> (count % pageSize == <span class="hljs-number">0</span>)<br>                &#123;<br>                    progressCount++;<br>                    progressIndicator.setIndeterminate(<span class="hljs-keyword">false</span>);<br>                    progressIndicator.setFraction(progressCount * <span class="hljs-number">0.1</span>);<br>                &#125;<br>                out.write(buf, <span class="hljs-number">0</span>, bytesRead);<br>                <span class="hljs-keyword">if</span> (ps != <span class="hljs-keyword">null</span> &amp;&amp; ps.checkError())<br>                &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException(<span class="hljs-string">&quot;Unable to write to output stream.&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">true</span>)<br>            &#123;<br>                out.close();<br>                out = <span class="hljs-keyword">null</span>;<br>                in.close();<br>                in = <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">true</span>)<br>            &#123;<br>                closeStream(out);<br>                closeStream(in);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 下载单个文件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strhdfspath       HDFS中选中的单个文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strLocalPath      下载要保存到本地的文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileSystem        HDFS文件系统对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> progressIndicator IDEA进度对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> project           IDEA工程</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(String strhdfspath, String strLocalPath, FileSystem fileSystem,</span></span><br><span class="hljs-function"><span class="hljs-params">                                             ProgressIndicator progressIndicator, Project project)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">boolean</span> isSuccess = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            isSuccess = copyFile(strhdfspath, strLocalPath, fileSystem, progressIndicator);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex)<br>        &#123;<br>            isSuccess = <span class="hljs-keyword">false</span>;<br><br>        &#125;<br>        <span class="hljs-keyword">if</span> (!isSuccess)<br>        &#123;<br>            MessageUtil.showErrorDialog(project, LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.MESSAGETILE),<br>                    LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.DOWNFAILED));<br>        &#125; <span class="hljs-keyword">else</span><br>        &#123;<br>            MessageUtil.showInfoDialog(project, LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.MESSAGETILE),<br>                    LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.DOWNSUCCESS));<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将文件或目录拷贝到本地系统(即下载目录或文件)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> src 远程的文件或者目录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dst 本地的文件或者目录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conf 系统配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> overwrite 是否覆盖</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcFileSystem 源系统对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> progressIndicator 进度对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span>  <span class="hljs-title">copyToLocalFile</span><span class="hljs-params">(String src,String dst,Configuration conf,<span class="hljs-keyword">boolean</span> overwrite,</span></span><br><span class="hljs-function"><span class="hljs-params">                                           FileSystem srcFileSystem,ProgressIndicator progressIndicator)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">boolean</span> isSuccess=<span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            FileSystem dstFileSystem = getLocal(conf);<span class="hljs-comment">//获取目标(本地文件系统)</span><br>            FileStatus fileStatus = srcFileSystem.getFileStatus(<span class="hljs-keyword">new</span> Path(src));<br>            isSuccess= copyFile(srcFileSystem,fileStatus,dstFileSystem,<span class="hljs-keyword">new</span> Path(dst),<br>                    overwrite,progressIndicator,LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.DOWNPROGRESSTEXT));<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex)<br>        &#123;<br>            LoggerFactory.createLogger(HDFSUtil.class).error(<span class="hljs-string">&quot;Error&quot;</span>,ex);<br>        &#125;<br>        <span class="hljs-keyword">return</span> isSuccess;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将本地文件或者目录拷贝到目标系统中（HDFS）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> src 源路径（本地路径）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dst 目标路径（HDFS路径）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conf 配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> overwrite 是否覆盖</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dstFileSystem 目标文件系统（HDFS）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> progressIndicator 进度对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">copyFromLocalFile</span><span class="hljs-params">(String src,String dst,Configuration conf,<span class="hljs-keyword">boolean</span> overwrite,</span></span><br><span class="hljs-function"><span class="hljs-params">                                                         FileSystem dstFileSystem,ProgressIndicator progressIndicator)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">boolean</span> isSuccess=<span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            FileSystem srcFileSystem = getLocal(conf);<span class="hljs-comment">//获取本地选中的目录或者文件</span><br>            FileStatus fileStatus = srcFileSystem.getFileStatus(<span class="hljs-keyword">new</span> Path(src));<br>            isSuccess= copyFile(srcFileSystem,fileStatus,dstFileSystem,<span class="hljs-keyword">new</span> Path(dst),<br>                    overwrite,progressIndicator,LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.UPPROGRESSTEXT));<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex)<br>        &#123;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> isSuccess;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcFS</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcStatus</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dstFS</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dst</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> overwrite</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> progressIndicator</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strProgressText</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(FileSystem srcFS, FileStatus srcStatus,</span></span><br><span class="hljs-function"><span class="hljs-params">                               FileSystem dstFS, Path dst,</span></span><br><span class="hljs-function"><span class="hljs-params">                               <span class="hljs-keyword">boolean</span> overwrite,ProgressIndicator progressIndicator,String strProgressText)</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br>        Path src = srcStatus.getPath();<br>        dst = checkDest(src.getName(), dstFS, dst, overwrite);<br>        <span class="hljs-keyword">if</span> (srcStatus.isDirectory())<br>        &#123;<br>            checkDependencies(srcFS, src, dstFS, dst);<br>            <span class="hljs-keyword">if</span> (!dstFS.mkdirs(dst))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            FileStatus contents[] = srcFS.listStatus(src);<br>            <span class="hljs-keyword">int</span> fileCount= (<span class="hljs-keyword">int</span>)Math.ceil(contents.length/<span class="hljs-number">100.00</span>);<br>            <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>            String dir = LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.OBJECTTYPEDIRECTORY);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; contents.length; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i%fileCount==<span class="hljs-number">0</span>)<br>                &#123;<br>                    k++;<br>                    progressIndicator.setIndeterminate(<span class="hljs-keyword">false</span>);<br>                    progressIndicator.setFraction(k * <span class="hljs-number">0.01</span>);<br>                    String strMessage = String.format(<span class="hljs-string">&quot;%s：%s&quot;</span>,strProgressText+dir,contents[i].getPath().getParent().toString());<br>                    progressIndicator.setText(strMessage);<br>                &#125;<br>                copyFile(srcFS, contents[i], dstFS,<br>                        <span class="hljs-keyword">new</span> Path(dst, contents[i].getPath().getName()), overwrite, progressIndicator,strProgressText);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span><br>        &#123;<br>            InputStream in = <span class="hljs-keyword">null</span>;<br>            OutputStream out = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                in = srcFS.open(src);<br>                out = dstFS.create(dst, overwrite);<br>                PrintStream ps = out <span class="hljs-keyword">instanceof</span> PrintStream ? (PrintStream) out : <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[HDFSUtil.BUFFERSIZE];<br>                <span class="hljs-keyword">long</span> fileSize=srcStatus.getLen();<br>                <span class="hljs-keyword">int</span> bufCount =(<span class="hljs-keyword">int</span>) Math.ceil(fileSize / (HDFSUtil.BUFFERSIZE*<span class="hljs-number">1.00</span>));<span class="hljs-comment">//缓冲区个数</span><br>                <span class="hljs-keyword">int</span> count =<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">int</span> showProgressCount= (<span class="hljs-keyword">int</span>)Math.ceil(bufCount/<span class="hljs-number">100.00</span>);<span class="hljs-comment">//计算多少个缓冲区后，显示进度条的一个刻度</span><br>                <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>                String strFile=LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.OBJECTTYPEFILE);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> bytesRead = in.read(buf); bytesRead &gt;= <span class="hljs-number">0</span>; bytesRead = in.read(buf))<br>                &#123;<br>                    count++;<br>                    <span class="hljs-keyword">if</span> (count % showProgressCount == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        k++;<br>                        progressIndicator.setIndeterminate(<span class="hljs-keyword">false</span>);<br>                        progressIndicator.setFraction(k * <span class="hljs-number">0.01</span>);<br>                        progressIndicator.setText2(strProgressText+strFile+<span class="hljs-string">&quot;(&quot;</span>+k+<span class="hljs-string">&quot;%)：&quot;</span>+src.toString());<br>                    &#125;<br>                    out.write(buf, <span class="hljs-number">0</span>, bytesRead);<br>                    <span class="hljs-keyword">if</span> (ps != <span class="hljs-keyword">null</span> &amp;&amp; ps.checkError())<br>                    &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException(<span class="hljs-string">&quot;Unable to write to output stream.&quot;</span>);<br>                    &#125;<br>                &#125;<br>                out.close();<br>                out = <span class="hljs-keyword">null</span>;<br>                in.close();<br>                in = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e)<br>            &#123;<br>                IOUtils.closeStream(out);<br>                IOUtils.closeStream(in);<br>                <span class="hljs-keyword">throw</span> e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dstFS</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dst</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> overwrite</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> Path <span class="hljs-title">checkDest</span><span class="hljs-params">(String srcName, FileSystem dstFS, Path dst,</span></span><br><span class="hljs-function"><span class="hljs-params">                                  <span class="hljs-keyword">boolean</span> overwrite)</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br>        FileStatus sdst;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            sdst = dstFS.getFileStatus(dst);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e)<br>        &#123;<br>            sdst = <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != sdst)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (sdst.isDirectory())<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == srcName)<br>                &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException(<span class="hljs-string">&quot;Target &quot;</span> + dst + <span class="hljs-string">&quot; is a directory&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> checkDest(<span class="hljs-keyword">null</span>, dstFS, <span class="hljs-keyword">new</span> Path(dst, srcName), overwrite);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!overwrite)<br>            &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException(<span class="hljs-string">&quot;Target &quot;</span> + dst + <span class="hljs-string">&quot; already exists&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dst;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcFS</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> src</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dstFS</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dst</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkDependencies</span><span class="hljs-params">(FileSystem srcFS, Path src,</span></span><br><span class="hljs-function"><span class="hljs-params">                                          FileSystem dstFS, Path dst)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (srcFS == dstFS)<br>        &#123;<br>            String srcq = src.makeQualified(srcFS).toString() + Path.SEPARATOR;<br>            String dstq = dst.makeQualified(dstFS).toString() + Path.SEPARATOR;<br>            <span class="hljs-keyword">if</span> (dstq.startsWith(srcq))<br>            &#123;<br>                <span class="hljs-keyword">if</span> (srcq.length() == dstq.length())<br>                &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException(<span class="hljs-string">&quot;Cannot copy &quot;</span> + src + <span class="hljs-string">&quot; to itself.&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException(<span class="hljs-string">&quot;Cannot copy &quot;</span> + src + <span class="hljs-string">&quot; to its subdirectory &quot;</span> +<br>                            dst);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>个人作品</category>
      
      <category>IntelliJ Plugin For Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij Plugin</tag>
      
      <tag>Hadoop</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HadoopIntellijPlugin插件国际化多语言支持设计和实现</title>
    <link href="/2017/08/04/IntellijPluginHadoop/010-IntellijPluginHadoop/"/>
    <url>/2017/08/04/IntellijPluginHadoop/010-IntellijPluginHadoop/</url>
    
    <content type="html"><![CDATA[<p>Hadoop-IntelliJ-Plugin 的国际化多语言支持比较简单，直接使用了Java的本地化实现机制。先简单的介绍一下Java的本地化方法。  </p><h2 id="本地化介绍"><a href="#本地化介绍" class="headerlink" title="本地化介绍"></a>本地化介绍</h2><p>&emsp;&emsp;“国际化信息”也称为“本地化信息”，一般需要两个条件才可以确定一个特定类型的本地化信息，它们分别是“语言类型”和“国家/地区的类型”。如中文本地化信息既有中国大陆地区的中文，又有中国台湾、中国香港地区的中文，还有新加坡地区的中文。<br>&emsp;&emsp;Java通过java.util.Locale类表示一个本地化对象，它允许通过语言参数和国家/地区参数创建一个确定的本地化对象。语言参数使用ISO标准语言代码表示，这些代码是由ISO-639标准定义的，每一种语言由两个小写字母表示。在许多网站上都可以找到这些代码的完整列表，下面的网址是提供了标准语言代码的信息：<a href="http://www.loc.gov/standards/iso639-2/php/English_list.php%E3%80%82">http://www.loc.gov/standards/iso639-2/php/English_list.php。</a><br>&emsp;&emsp;国家/地区参数也由标准的ISO国家/地区代码表示，这些代码是由ISO-3166标准定义的，每个国家/地区由两个大写字母表示。用户可以从以下网址查看ISO-3166的标准代码：<a href="http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html%E3%80%82">http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html。</a><br>&emsp;&emsp;下表给出了一些语言和国家/地区的标准代码：<br><img src="1.png"></p><p>&emsp;&emsp;Java.util.Locale类是表示语言和国家/地区信息的本地化类，它是创建国际化应用的基础。如下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//带有语言和国家/地区信息的本地化对象</span><br>Locale locale1 = <span class="hljs-keyword">new</span> Locale(<span class="hljs-string">&quot;zh&quot;</span>,<span class="hljs-string">&quot;CN&quot;</span>);<br><span class="hljs-comment">//只有语言信息的本地化对象</span><br>Locale locale2 = <span class="hljs-keyword">new</span> Locale(<span class="hljs-string">&quot;zh&quot;</span>);<br><span class="hljs-comment">//等同于Locale(&quot;zh&quot;,&quot;CN&quot;)</span><br>Locale locale3 = Locale.CHINA;<br><span class="hljs-comment">//等同于Locale(&quot;zh&quot;)</span><br>Locale locale4 = Locale.CHINESE;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;如果有些系统需要支持多种语言设置，那就要准备对应的语言资源文件，并以规范的方式进行命名。国际化资源文件的命名规范规定资源名称采用以下的方式进行命名： </p><blockquote> <center> <资源名>_<语言代码>_<国家/地区代码>.properties </center></blockquote><p>&emsp;&emsp;其中，语言代码和国家/地区代码都是可选的。&lt;资源名&gt;.properties命名的国际化资源文件是默认的资源文件，即某个本地化类型在系统中找不到对应的资源文件，就采用这个默认的资源文件。&lt;资源名&gt;_&lt;语言代码&gt;.properties命名的国际化资源文件是某一语言默认的资源文件，即某个本地化类型在系统中找不到精确匹配的资源文件，将采用相应语言默认的资源文件。拿我们插件的项目来说明，插件项目目前只支持简体中文和英文两种:  </p><div class="hljs code-wrapper"><pre><code>  HadoopNavigator_en_US.properties  表示的是英文语言资源文件    HadoopNavigator_zh_CN.properties 表示的是简体中文语言资源文件  </code></pre></div><p>英文语言信息在资源文件以属性名/值的方式表示：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">systemText=Hadoop FileSystem<br>settingText=Setting<br>back=Back<br>forward=Forward<br>expandAll=Expand All<br>collapseAll=Collapse All<br>showObjectProperties=Show Object Properties<br>hideObjectProperties=Hide Object Properties<br>connectAction=Connect<br>disconnectAction=DisConnect<br>refreshObjectsStatusAction=Refresh<br>CreateDirectoryAction=Create Directory<br>deleteDirectoryOrFileAction=Delete Directory<br>downDirectoryOrFileAction=Down Directory Or File<br>refreshDirectoryAction=Refresh<br>uploadDirectoryAction=Upload Directory<br>uploadFileAction=Upload File<br>viewFileAction=View<br>objectTypeDirectory=Directory<br>objectTypeFile=File<br>directoryPath=Directory Path<br>directoryOwner=Directory Owner<br></code></pre></div></td></tr></table></figure><p>中文语言信息健/值：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">systemText=Hadoop\u6587\u4ef6\u7cfb\u7edf<br>settingText=\u8bbe\u7f6e<br>back=\u4e0a\u4e00\u8282\u70b9<br>forward=\u4e0b\u4e00\u8282\u70b9<br>expandAll=\u5168\u90e8\u5c55\u5f00<br>collapseAll=\u5168\u90e8\u6298\u53e0<br>showObjectProperties=\u663e\u793a\u5bf9\u8c61\u5c5e\u6027<br>hideObjectProperties=\u9690\u85cf\u5bf9\u8c61\u5c5e\u6027<br>connectAction=\u8fde\u63a5<br>disconnectAction=\u65ad\u5f00\u8fde\u63a5<br>refreshObjectsStatusAction=\u5237\u65b0<br>CreateDirectoryAction=\u521b\u5efa\u76ee\u5f55<br>deleteDirectoryOrFileAction=\u5220\u9664<br>downDirectoryOrFileAction=\u4e0b\u8f7d<br>refreshDirectoryAction=\u5237\u65b0<br>uploadDirectoryAction=\u4e0a\u4f20\u76ee\u5f55<br>uploadFileAction=\u4e0a\u4f20\u6587\u4ef6<br>viewFileAction=\u67e5\u770b\u6587\u4ef6<br>objectTypeDirectory=\u76ee\u5f55<br>objectTypeFile=\u6587\u4ef6<br>directoryPath=\u76ee\u5f55\u8def\u5f84<br>directoryOwner=\u76ee\u5f55\u6240\u6709\u8005<br>directoryPermission=\u76ee\u5f55\u6743\u9650<br>directoryGroup=\u76ee\u5f55\u6240\u5728\u7684<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;本地化不同的同一资源文件，虽然属性值各不相同，但属性名却是相同的，这样应用程序就可以通过Locale对象和属性名精确调用到某个具体的属性值了。  </p><p>&emsp;&emsp;中文的本地化资源文件内容采用了特殊的编码表示中文字符，这是因为资源文件对文件内容有严格的要求：只能包含ASCII字符。所以必须将非ASCII字符的内容转换为Unicode代码的表示方式。如上面中文的HadoopNavigator_zh_CN.properties资源文件的属性值中文字符串对应的Unicode代码串。  </p><p>&emsp;&emsp;如果在应用开发时，直接采用Unicode代码编辑资源文件是很不方便的，所以，通常我们直接使用正常的方式编写资源文件，在测试或部署时再采用工具进行转换。JDK在bin目录下为我们提供了一个完成此项功能的native2ascii工具，它可以将中文字符的资源文件转换为Unicode代码格式的文件，命令格式如下：</p><blockquote><center>native2ascii [-reverse] [-encoding 编码] [输入文件 [输出文件]] </center></blockquote><p>&emsp;&emsp;对于语言资源文件的读取解析，Java为我们提供了用于加载本地化资源文件的方便类java.util.ResourceBoundle。ResourceBoundle为加载及访问资源文件提供便捷的操作，下面的语句从相对于类路径的目录中加载一个名为resource的本地化资源文件：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置本地化资源</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> locale</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setResourceBundle</span><span class="hljs-params">(Locale locale)</span></span><br><span class="hljs-function"></span>&#123;<br>    resourceBundle = ResourceBundle.getBundle(<span class="hljs-string">&quot;HadoopNavigator&quot;</span>, locale);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;注意资源文件的路径。ResourceBundle在加载资源时，如果指定的本地化资源文件不存在，它按以下顺序尝试加载其他的资源：本地系统默认本地化对象对应的资源→默认的资源。</p><h2 id="插件的国际化多语言设计和实现"><a href="#插件的国际化多语言设计和实现" class="headerlink" title="插件的国际化多语言设计和实现"></a>插件的国际化多语言设计和实现</h2><h3 id="本地化语言设置管理类-LocalLanguageManager"><a href="#本地化语言设置管理类-LocalLanguageManager" class="headerlink" title="本地化语言设置管理类 LocalLanguageManager"></a>本地化语言设置管理类 LocalLanguageManager</h3><p>&emsp;&emsp;定义一个本地化语言设置管理类 LocalLanguageManager ，继承ApplicationComponent，Application级别插件，在IDEA启动时读取操作系统默认的语言类进行相关设置。该类还管理语言设置更改后的事件通知。当用户更改了界面UI的语言设置，会触发LanguageSettingListener ，重新加载语言资源文件，并且通知相关组件，需要调整界面语言。LocalLanguageManager 类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义本地化语言管理类</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-29.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocaleLanguageManager</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationComponent</span></span><br><span class="hljs-class"></span>&#123;<br>    ResourceBundle resourceBundle=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取本地化语言管理</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LocaleLanguageManager <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span>  ApplicationManager.getApplication().getComponent(LocaleLanguageManager.class);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取本地化资源对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResourceBundle <span class="hljs-title">getResourceBundle</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> resourceBundle;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置本地化资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> locale</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setResourceBundle</span><span class="hljs-params">(Locale locale)</span></span><br><span class="hljs-function">    </span>&#123;<br>        resourceBundle = ResourceBundle.getBundle(<span class="hljs-string">&quot;HadoopNavigator&quot;</span>, locale);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组件初始化 获取系统默认的语言</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initComponent</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//获取当前操作系统的语言环境，默认加载</span><br>        Locale localeDefault = Locale.getDefault();<br>        setResourceBundle(localeDefault);<br>        EventUtil.subscribe(<span class="hljs-keyword">null</span>, ProjectLifecycleListener.TOPIC, <span class="hljs-keyword">this</span>.projectLifecycleListener);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">disposeComponent</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponentName</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;HadoopNavigator.LocaleLanguageManager&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 语言改变监听事件处理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ProjectLifecycleListener projectLifecycleListener = <span class="hljs-keyword">new</span> ProjectLifecycleListener.Adapter()<br>    &#123;<br>        Project project;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">projectComponentsInitialized</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Project project)</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">this</span>.project=project;<br>            EventUtil.subscribe(project,<span class="hljs-keyword">null</span>, LanguageSettingsListener.TOPIC, <span class="hljs-keyword">this</span>.languageSettingsListener);<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> LanguageSettingsListener languageSettingsListener = <span class="hljs-keyword">new</span> LanguageSettingsListener()<br>        &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LanguageChanged</span><span class="hljs-params">(Locale locale)</span></span><br><span class="hljs-function">            </span>&#123;<br>                resourceBundle = ResourceBundle.getBundle(<span class="hljs-string">&quot;HadoopNavigator&quot;</span>, locale);<br>                <span class="hljs-keyword">final</span> ConnectionBundle connectionBundle = ConnectionManager.getInstance(project).getConnectionBundle();<br>                <span class="hljs-keyword">for</span>(ConnectionHandler connectionHandler :connectionBundle.getConnectionHandlers())<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (connectionHandler != <span class="hljs-keyword">null</span>)<br>                    &#123;<br>                        connectionHandler.getObjectBundle().refreshTreeChildren();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">//通知相关组件，需要调整界面语言</span><br>                EventUtil.notify(project, UpdateLanguageListener.TOPIC).UpdateLanguage();<br>            &#125;<br>        &#125;;<br>    &#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="国际化语言设置UI设计"><a href="#国际化语言设置UI设计" class="headerlink" title="国际化语言设置UI设计"></a>国际化语言设置UI设计</h3><p>(1)、RegionSetting类，国际化语言设置类，实现IDEA 配置Configuration接口，可以从配置中读取当前设置的语言，也可以将当前设置的语言写入XML。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义国际化语言设置类</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-8-1.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegionalSettings</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Configuration</span>&lt;<span class="hljs-title">RegionalSettingsEditorForm</span>&gt;</span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> Locale locale = Locale.getDefault();<br><br>    <span class="hljs-keyword">private</span> Project project=<span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProject</span><span class="hljs-params">(Project project)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>.project = project;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取国际化语言配置实例对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RegionalSettings <span class="hljs-title">getInstance</span><span class="hljs-params">(Project project)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> GeneralProjectSettings.getInstance(project).getRegionalSettings();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 应用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ConfigurationException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">apply</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ConfigurationException</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">super</span>.apply();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取当前配置的语言对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Locale <span class="hljs-title">getLocale</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> locale;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置当前国际化语言</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> locale</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLocale</span><span class="hljs-params">(Locale locale)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>.locale = locale;<br>    &#125;<br>    <span class="hljs-comment">/*********************************************************</span><br><span class="hljs-comment">     *                      Configuration                    *</span><br><span class="hljs-comment">     *********************************************************/</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实例化国际化设置UI</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RegionalSettingsEditorForm <span class="hljs-title">createConfigurationEditor</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RegionalSettingsEditorForm(<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getConfigElementName</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;regional-settings&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取配置，获取当前设置的国际化语言</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readConfiguration</span><span class="hljs-params">(Element element)</span></span><br><span class="hljs-function">    </span>&#123;<br>        String localeString = SettingsUtil.getString(element, <span class="hljs-string">&quot;locale&quot;</span>, Locale.getDefault().toString());<br>        <span class="hljs-keyword">boolean</span> useSystemLocale = localeString.equals(<span class="hljs-string">&quot;SYSTEM_DEFAULT&quot;</span>);<br>        <span class="hljs-keyword">if</span> (useSystemLocale)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.locale = Locale.getDefault();<br>        &#125; <span class="hljs-keyword">else</span><br>        &#123;<br>           <span class="hljs-keyword">this</span>.locale = LocaleOption.getLocalOption(localeString).getLocale();<br>        &#125;<br>        LocaleLanguageManager.getInstance().setResourceBundle(locale);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将当前的国际化配置写入配置文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeConfiguration</span><span class="hljs-params">(Element element)</span></span><br><span class="hljs-function">    </span>&#123;<br>        String localLanguage =<span class="hljs-string">&quot;SYSTEM_DEFAULT&quot;</span>;<br>        <span class="hljs-keyword">if</span>(locale!=<span class="hljs-keyword">null</span>)<br>        &#123;<br>            localLanguage = locale.getLanguage()+<span class="hljs-string">&quot;-&quot;</span>+locale.getCountry();<br>        &#125;<br>        SettingsUtil.setString(element, <span class="hljs-string">&quot;locale&quot;</span>, localLanguage);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>(2)、UI对象RegionalSettingsEditorForm，界面上设置语言选择的下拉列表，初始化中文和英文的语言进行填充。代码比较简单，就不贴了。</p><h3 id="语言标志类LanguageKeyWord"><a href="#语言标志类LanguageKeyWord" class="headerlink" title="语言标志类LanguageKeyWord"></a>语言标志类LanguageKeyWord</h3><p>&emsp;&emsp;定义界面控件语言标示类LanguageKeyWord，将插件界面UI、对话框UI等等需要支持多语言的控件，设置关键字标志，界面控件语言更改可以使用下面的方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">displayName = LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.DFSLOCATIONS);<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;多语言支持的配置界面如下：<br><img src="2.png"></p>]]></content>
    
    
    <categories>
      
      <category>个人作品</category>
      
      <category>IntelliJ Plugin For Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij Plugin</tag>
      
      <tag>Hadoop</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HadoopIntellijPlugin插件文件系统配置设计和实现2</title>
    <link href="/2017/08/03/IntellijPluginHadoop/009-IntellijPluginHadoop/"/>
    <url>/2017/08/03/IntellijPluginHadoop/009-IntellijPluginHadoop/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本节具体分析一下插件配置中各个具体的配置项设计和实现，包括HDFS连接配置设置、插件系统一般配置中国际化语言支持和浏览器树展现方式配置。</p><h2 id="插件配置起点ProjectSetting"><a href="#插件配置起点ProjectSetting" class="headerlink" title="插件配置起点ProjectSetting"></a>插件配置起点ProjectSetting</h2><p>&emsp;&emsp;插件的配置项是以Intellij 工程Project为起点，在IDEA启动加载工程后，初始化并读取配置。工程配置设计整体类图：<br><img src="1.png"></p><h3 id="工程配置设置ProjectSetting和配置管理ProjectSettingManager"><a href="#工程配置设置ProjectSetting和配置管理ProjectSettingManager" class="headerlink" title="工程配置设置ProjectSetting和配置管理ProjectSettingManager"></a>工程配置设置ProjectSetting和配置管理ProjectSettingManager</h3><p>&emsp;&emsp;ProjectSetting由HDFS配置和插件通用配置组成，继承配置集合泛型类CompositeProjectConfiguration。ProjectSettingManager是配置管理类，负责初始化整个配置，是Project级别的插件组件，当加载工程时初始化该类。当加载工程的时候，在初始化插件组件方法initComponent()中调用importDefaultSettings() 方法，判断当前工程文件是否有该插件工程的配置文件，没有，那就创建默认的配置，配置文件名称：hdfsnavigator.xml重写loadState()方法，读取各个配置项，核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 导入新的配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> isNewProject</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">importDefaultSettings</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> isNewProject)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">final</span> Project project = getProject();<br>    Boolean settingsLoaded = project.getUserData(FileSystemDataKeys.PROJECT_SETTINGS_LOADED_KEY);<br>    <span class="hljs-keyword">if</span> ((settingsLoaded == <span class="hljs-keyword">null</span>) || (!settingsLoaded.booleanValue()) || (!isNewProject))<br>    &#123;<br>        String message = LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.IMPORTDEFAULTSETTINGSASKINFORMATION) +<br>                project.getName() + <span class="hljs-string">&quot;\&quot;?&quot;</span>;<br>        String strYes=LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.ASKYES);<br>        String strNo=LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.ASKNO);<br>        MessageUtil.showQuestionDialog(project, LocaleLanguageManager.getInstance().getResourceBundle().getString(LanguageKeyWord.IMPORTDEFAULTSETTINGSASKTITLE),<br>                message, <span class="hljs-keyword">new</span> String[]&#123;strYes, strNo&#125;, <span class="hljs-number">0</span>, <span class="hljs-keyword">new</span> MessageCallback(Integer.valueOf(<span class="hljs-number">0</span>))<br>        &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span><br><span class="hljs-function">            </span>&#123;<br>                <span class="hljs-keyword">try</span><br>                &#123;<br>                    Element element = <span class="hljs-keyword">new</span> Element(<span class="hljs-string">&quot;state&quot;</span>);<br>                    ProjectSettings defaultProjectSettings = DefaultProjectSettingsManager.getInstance().<br>                            getDefaultProjectSettings();<br>                    defaultProjectSettings.writeConfiguration(element);<br>                    ConnectionBundleSettings.IS_IMPORT_EXPORT_ACTION.set(<span class="hljs-keyword">true</span>);<br>                    getProjectSettings().readConfiguration(element);<br><br>                    (EventUtil.notify(project, ConnectionSettingsListener.TOPIC)).connectionsChanged();<br>                    <span class="hljs-keyword">if</span> (!isNewProject)<br>                    &#123;<br>                        MessageUtil.showInfoDialog(project, <span class="hljs-string">&quot;Project Settings&quot;</span>,<br>                                <span class="hljs-string">&quot;Default project settings loaded to project \&quot;&quot;</span> + project.getName() + <span class="hljs-string">&quot;\&quot;.&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">finally</span><br>                &#123;<br>                    ConnectionBundleSettings.IS_IMPORT_EXPORT_ACTION.set(<span class="hljs-keyword">false</span>);<br>                &#125;<br><br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读取并解析配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadState</span><span class="hljs-params">(Element element)</span></span><br><span class="hljs-function"></span>&#123;<br>    projectSettings.readConfiguration(element);<br>    getProject().putUserData(FileSystemDataKeys.PROJECT_SETTINGS_LOADED_KEY, <span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HDFS文件系统浏览器通用配置GeneraProjectSetting和UI-GeneralProjectSettingsFrom"><a href="#HDFS文件系统浏览器通用配置GeneraProjectSetting和UI-GeneralProjectSettingsFrom" class="headerlink" title="HDFS文件系统浏览器通用配置GeneraProjectSetting和UI GeneralProjectSettingsFrom"></a>HDFS文件系统浏览器通用配置GeneraProjectSetting和UI GeneralProjectSettingsFrom</h3><p>&emsp;&emsp;这里定义了通用配置的UI界面，和操作管理类，具体的设置分为国际化语言配置和树展现方式，由具体的类和UI去实现。GeneraProjectSetting 通用配置管理类，主要获取语言配置和树展现方式配置，核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GeneralProjectSettings</span><span class="hljs-params">(Project project)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">super</span>(project);<br>    <span class="hljs-comment">//区域语言设置</span><br>    regionalSettings = <span class="hljs-keyword">new</span> RegionalSettings();<br>    regionalSettings.setProject(project);<br>    <span class="hljs-comment">//HDFS文件系统浏览器树展现方式设置</span><br>    browserSettings = <span class="hljs-keyword">new</span> BrowserSettings();<br>    browserSettings.setProject(project);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取语言设置配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RegionalSettings <span class="hljs-title">getRegionalSettings</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> regionalSettings;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取HDFS浏览器树展现方式配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> BrowserSettings <span class="hljs-title">getBrowserSettings</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> browserSettings;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建通用配置编辑UI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> GeneralProjectSettingsForm <span class="hljs-title">createConfigurationEditor</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GeneralProjectSettingsForm(<span class="hljs-keyword">this</span>);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取通用配置集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> Configuration[] createConfigurations()<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Configuration[]&#123;regionalSettings,browserSettings&#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;GeneralProjectSettingsForm 通用配置的UI，比较简单，使用两个Panel，保存语言配置和树的展现方式配置。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化通用配置UI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> generalSettings</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GeneralProjectSettingsForm</span><span class="hljs-params">(GeneralProjectSettings generalSettings)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">super</span>(generalSettings);<br>    resetFormChanges();<br>    registerComponent(mainPanel);<br>    localeSettingsPanel.add(generalSettings.getRegionalSettings().createComponent(), BorderLayout.CENTER);<br>    browsersettingPanel.add(generalSettings.getBrowserSettings().createComponent(), BorderLayout.CENTER);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="HDFS连接connection配置"><a href="#HDFS连接connection配置" class="headerlink" title="HDFS连接connection配置"></a>HDFS连接connection配置</h2><p>HDFS连接Connection配置设计类图如下：<br><img src="2.png"></p><h3 id="相关连接配置类讲解"><a href="#相关连接配置类讲解" class="headerlink" title="相关连接配置类讲解"></a>相关连接配置类讲解</h3><p>连接配置管理类ConnectionSetting<br>HDFS连接配置类ConnectionFileSystemSettings<br>HDFS连接集合配置类ConnectionBundleSettings<br>ConnectionSettings 是HDFS连接配置的管理类，获取ConnFileSystemSettings 和ConnectionBundleSettings<br>ConnectionFileSystemSettings抽象类为HDFS连接设置类，包括设置HDFS的Host、端口；MR的Host和端口；HDFS连接的用户等等。<br>ConnectionBundleSettings抽象类是配置的集合类，增加、删除一个配置等等<br>ConnectionFileSystemSettings类继承Configuration泛型类，实现了readConfiguration和witreConfiguartion  </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读取配置并解析</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readConfiguration</span><span class="hljs-params">(Element element)</span></span><br><span class="hljs-function"></span>&#123;<br>    String connectionId = getString(element, <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-keyword">null</span>);<br>    <span class="hljs-keyword">if</span> (connectionId != <span class="hljs-keyword">null</span>)<br>    &#123;<br>        parent.setConnectionId(connectionId);<br>    &#125;<br>    name = getString(element, <span class="hljs-string">&quot;name&quot;</span>, name);<br>    description = getString(element, <span class="hljs-string">&quot;description&quot;</span>, description);<br>    fileSystemType = FileSystemType.get(getString(element, <span class="hljs-string">&quot;database-type&quot;</span>, fileSystemType.getName()));<br>    databaseVersion = getDouble(element, <span class="hljs-string">&quot;database-version&quot;</span>, databaseVersion);<br>    user = getString(element, <span class="hljs-string">&quot;user&quot;</span>, user);<br>    <span class="hljs-keyword">if</span>(StringUtil.isEmptyOrSpaces(user))<br>    &#123;<br>        user=System.getProperty(<span class="hljs-string">&quot;user.name&quot;</span>);<br>    &#125;<br>    password = decodePassword(getString(element, <span class="hljs-string">&quot;password&quot;</span>, password));<br>    active = getBoolean(element, <span class="hljs-string">&quot;active&quot;</span>, active);<br>    osAuthentication = getBoolean(element, <span class="hljs-string">&quot;os-authentication&quot;</span>, osAuthentication);<br>    updateHashCode();<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将设置的配置项写入XML</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeConfiguration</span><span class="hljs-params">(Element element)</span></span><br><span class="hljs-function"></span>&#123;<br>    setString(element, <span class="hljs-string">&quot;name&quot;</span>, nvl(name));<br>    setString(element, <span class="hljs-string">&quot;description&quot;</span>, nvl(description));<br>    setBoolean(element, <span class="hljs-string">&quot;active&quot;</span>, active);<br>    setBoolean(element, <span class="hljs-string">&quot;os-authentication&quot;</span>, osAuthentication);<br>    setString(element, <span class="hljs-string">&quot;database-type&quot;</span>, nvl(fileSystemType == <span class="hljs-keyword">null</span> ? FileSystemType.UNKNOWN.getName() : fileSystemType.getName()));<br>    setDouble(element, <span class="hljs-string">&quot;database-version&quot;</span>, databaseVersion);<br>    setString(element, <span class="hljs-string">&quot;user&quot;</span>, nvl(user));<br>    setString(element, <span class="hljs-string">&quot;password&quot;</span>, encodePassword(password));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;ConnectionBundleSettings HDFS 连接集合类，继承ProjectConfiguration泛型类，并且也实现了readConfiguartion 和WriteConfiguration</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读取配置并解析</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readConfiguration</span><span class="hljs-params">(Element element)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (IS_IMPORT_EXPORT_ACTION.get())<br>    &#123;<br>        Project project = getProject();<br>        List&lt;ConnectionHandler&gt; connectionHandlers = connectionBundle.getAllConnectionHandlers();<br>        ConnectionManager.getInstance(project).disposeConnections(connectionHandlers);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (Object o : element.getChildren())<br>    &#123;<br>        Element connectionElement = (Element) o;<br>        String connectionId = connectionElement.getAttributeValue(<span class="hljs-string">&quot;id&quot;</span>);<br>        ConnectionHandler connectionHandler = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (connectionId != <span class="hljs-keyword">null</span>)<br>        &#123;<br>            connectionHandler = connectionBundle.getConnection(connectionId);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (connectionHandler == <span class="hljs-keyword">null</span>)<br>        &#123;<br>            <span class="hljs-comment">//创建一个ConnectionHandler</span><br>            ConnectionSettings connectionSettings = <span class="hljs-keyword">new</span> ConnectionSettings(<span class="hljs-keyword">this</span>);<br>            connectionSettings.readConfiguration(connectionElement);<br>            connectionHandler = <span class="hljs-keyword">new</span> ConnectionHandlerImpl(connectionBundle, connectionSettings);<br>            connectionBundle.addConnection(connectionHandler);<br>        &#125; <span class="hljs-keyword">else</span><br>        &#123;<br>            ConnectionSettings connectionSettings = connectionHandler.getSettings();<br>            connectionSettings.readConfiguration(connectionElement);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 写入配置XML</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeConfiguration</span><span class="hljs-params">(Element element)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (ConnectionHandler connectionHandler : connectionBundle.getConnectionHandlers().getFullList())<br>    &#123;<br>        Element connectionElement = <span class="hljs-keyword">new</span> Element(<span class="hljs-string">&quot;fsconnection&quot;</span>);<br>        ConnectionSettings connectionSettings = connectionHandler.getSettings();<br>        connectionSettings.writeConfiguration(connectionElement);<br>        element.addContent(connectionElement);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="界面配置的UI类"><a href="#界面配置的UI类" class="headerlink" title="界面配置的UI类"></a>界面配置的UI类</h3><p>配置的UI类主要包括 ConnectionSettingForm、ConnectionBundleSettingsForm、GeneralFileSystemSettingsForm<br>ConnectionSettingForm HDFS连接配置的主界面UI，使用Tab列表的方式展示需要设置的连接配置<br>ConnectionBundleSettingsForm 连接集合主界面UI，创建一个连接，就添加到UI集合中显示，可以设置多个HDFS连接<br>GeneralFileSystemSettingsForm，每个连接的具体设置，包括HDFS的主机地址和端口、MR的地址和端口、访问HDFS的用户名称<br>这里就不再贴代码了。  </p><h2 id="国际化多语言和文件浏览器树展现方式设置"><a href="#国际化多语言和文件浏览器树展现方式设置" class="headerlink" title="国际化多语言和文件浏览器树展现方式设置"></a>国际化多语言和文件浏览器树展现方式设置</h2><h3 id="国际化多语言设置配置-RegionSettings和RegionalSettingEditorForm"><a href="#国际化多语言设置配置-RegionSettings和RegionalSettingEditorForm" class="headerlink" title="国际化多语言设置配置 RegionSettings和RegionalSettingEditorForm"></a>国际化多语言设置配置 RegionSettings和RegionalSettingEditorForm</h3><p>&emsp;&emsp;RegionSettings 语言设置管理类，获取设置的当前UI的语言。RegionalSettingEditorForm 语言设置的UI，很简单，界面上只有一个下拉列表，选中UI需要展示的语言。<br>RegionSettings类的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义国际化语言设置类</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-8-1.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegionalSettings</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Configuration</span>&lt;<span class="hljs-title">RegionalSettingsEditorForm</span>&gt;</span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> Locale locale = Locale.getDefault();<br>    <span class="hljs-keyword">private</span> Project project=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProject</span><span class="hljs-params">(Project project)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>.project = project;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取国际化语言配置实例对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RegionalSettings <span class="hljs-title">getInstance</span><span class="hljs-params">(Project project)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> GeneralProjectSettings.getInstance(project).getRegionalSettings();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 应用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ConfigurationException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">apply</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ConfigurationException</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">super</span>.apply();<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取当前配置的语言对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Locale <span class="hljs-title">getLocale</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> locale;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置当前国际化语言</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> locale</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLocale</span><span class="hljs-params">(Locale locale)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>.locale = locale;<br>    &#125;<br>    <span class="hljs-comment">/*********************************************************</span><br><span class="hljs-comment">     *                      Configuration                    *</span><br><span class="hljs-comment">     *********************************************************/</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实例化国际化设置UI</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RegionalSettingsEditorForm <span class="hljs-title">createConfigurationEditor</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RegionalSettingsEditorForm(<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getConfigElementName</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;regional-settings&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取配置，获取当前设置的国际化语言</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readConfiguration</span><span class="hljs-params">(Element element)</span></span><br><span class="hljs-function">    </span>&#123;<br>        String localeString = SettingsUtil.getString(element, <span class="hljs-string">&quot;locale&quot;</span>, Locale.getDefault().toString());<br>        <span class="hljs-keyword">boolean</span> useSystemLocale = localeString.equals(<span class="hljs-string">&quot;SYSTEM_DEFAULT&quot;</span>);<br>        <span class="hljs-keyword">if</span> (useSystemLocale)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.locale = Locale.getDefault();<br>        &#125; <span class="hljs-keyword">else</span><br>        &#123;<br>           <span class="hljs-keyword">this</span>.locale = LocaleOption.getLocalOption(localeString).getLocale();<br>        &#125;<br>        LocaleLanguageManager.getInstance().setResourceBundle(locale);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将当前的国际化配置写入配置文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeConfiguration</span><span class="hljs-params">(Element element)</span></span><br><span class="hljs-function">    </span>&#123;<br>        String localLanguage =<span class="hljs-string">&quot;SYSTEM_DEFAULT&quot;</span>;<br>        <span class="hljs-keyword">if</span>(locale!=<span class="hljs-keyword">null</span>)<br>        &#123;<br>            localLanguage = locale.getLanguage()+<span class="hljs-string">&quot;-&quot;</span>+locale.getCountry();<br>        &#125;<br>        SettingsUtil.setString(element, <span class="hljs-string">&quot;locale&quot;</span>, localLanguage);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HDFS文件系统浏览器树的展现方式设置"><a href="#HDFS文件系统浏览器树的展现方式设置" class="headerlink" title="HDFS文件系统浏览器树的展现方式设置"></a>HDFS文件系统浏览器树的展现方式设置</h3><p>&emsp;&emsp;HDFS文件系统浏览器树有两种展现方式可设置，一是以单棵树多根节点展现多个连接，另一个是以Tab列表方式展现多个连接，两种方式界面比较：</p><p><img src="3.png">   <img src="4.png">    <img src="5.png"></p><p>&emsp;&emsp;BrowserSettings 树展现方式管理类，获取配置设置的展现方式对象BrowserDisplayMode;BrowserSettingEditorFrom ，设置展示方式的UI。两个类都比较简单，这里就不再说了。</p>]]></content>
    
    
    <categories>
      
      <category>个人作品</category>
      
      <category>IntelliJ Plugin For Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij Plugin</tag>
      
      <tag>Hadoop</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HadoopIntellijPlugin插件文件系统配置设计和实现1</title>
    <link href="/2017/08/02/IntellijPluginHadoop/008-IntellijPluginHadoop/"/>
    <url>/2017/08/02/IntellijPluginHadoop/008-IntellijPluginHadoop/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;HDFS文件系统浏览器的配置设置分为两部分，一个是配置的基础类，涉及到对象的持久化写入，该部分定义相关的接口和抽象类的实现；另一部分是具体的对象持久化配置，包括HDFS连接配置持久化和整个系统的通用配置（国际化多语言的支持和文件树展现方式）持久化。本节讲解配置的基础类。<br>配置的基础类，定义在core 包中。整个的类的关系图如下：<br><img src="1.png"></p><h2 id="定义持久化配置接口PersistentConfiguration"><a href="#定义持久化配置接口PersistentConfiguration" class="headerlink" title="定义持久化配置接口PersistentConfiguration"></a>定义持久化配置接口PersistentConfiguration</h2><p>&emsp;&emsp;该接口定义读取和写入持久化配置方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义持久化配置接口</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-21.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span>  <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PersistentConfiguration</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取持久化配置 config</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramElement</span><br><span class="hljs-comment">     */</span><br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">readConfiguration</span><span class="hljs-params">(Element paramElement)</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入持久化配置 config</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramElement</span><br><span class="hljs-comment">     */</span><br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">writeConfiguration</span><span class="hljs-params">(Element paramElement)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="定义Boolean、Enum、Int、String类型的对象持久化"><a href="#定义Boolean、Enum、Int、String类型的对象持久化" class="headerlink" title="定义Boolean、Enum、Int、String类型的对象持久化"></a>定义Boolean、Enum、Int、String类型的对象持久化</h2><p>&emsp;&emsp;这些对象，继承了抽象类Setting，并且实现了PersistentConfiguration接口。抽象类Setting，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义抽象设置类</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-21.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Setting</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">E</span>&gt;</span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> T value;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">Setting</span><span class="hljs-params">(String configName, T value)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = configName;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置项名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 配置项的值</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">value</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">this</span>.value;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置配置项的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">setValue</span><span class="hljs-params">(T value)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">boolean</span> response = !CommonUtil.safeEqual(<span class="hljs-keyword">this</span>.value, value);<br>        <span class="hljs-keyword">this</span>.value = value;<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取配置项的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getValue</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">this</span>.value;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取Setting的返回值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[&quot;</span> + getClass().getSimpleName() + <span class="hljs-string">&quot;] &quot;</span> + <span class="hljs-keyword">this</span>.name + <span class="hljs-string">&quot; = &quot;</span> + <span class="hljs-keyword">this</span>.value;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramE</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ConfigurationException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">to</span><span class="hljs-params">(E paramE)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> ConfigurationException</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramE</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">from</span><span class="hljs-params">(E paramE)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="定义抽象配置类Configuration"><a href="#定义抽象配置类Configuration" class="headerlink" title="定义抽象配置类Configuration"></a>定义抽象配置类Configuration</h2><p>&emsp;&emsp;抽象类Configuration是一个抽象的泛型类，创建和读取配置的主窗体UI对象：ConfigurationEditorForm，同时也继承了ConfigurationUtil类。<br>ConfigurationEditorForm类是配置的UI对象的抽象类，所有配置的UI对象都需要实现该类。该类继承了通用窗体类FileSystemBaseFormImpl。</p><h2 id="工程配置持久化ProjectConfiguration和配置集合类CompositeConfigurationEditorForm"><a href="#工程配置持久化ProjectConfiguration和配置集合类CompositeConfigurationEditorForm" class="headerlink" title="工程配置持久化ProjectConfiguration和配置集合类CompositeConfigurationEditorForm"></a>工程配置持久化ProjectConfiguration和配置集合类CompositeConfigurationEditorForm</h2><p>&emsp;&emsp;ProjectConfiguration 为工程配置抽象类，继承了配置Configuration，泛型类，定义了获取当前的工程Project。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义工程配置类</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-21.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProjectConfiguration</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConfigurationEditorForm</span>&gt;</span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">Configuration</span>&lt;<span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">ProjectSupplier</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">private</span> Project project;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化工程配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProjectConfiguration</span><span class="hljs-params">(Project project)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>.project = project;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *获取工程Project</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Project <span class="hljs-title">getProject</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.project;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;CompositeConfigurationEditorForm 类为配置集合类，插件的配置分为多个项，因此需要将多个配置组合到一起。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *定义配置集合类</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-21.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompositeConfiguration</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CompositeConfigurationEditorForm</span>&gt;</span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">Configuration</span>&lt;<span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> Configuration[] configurations;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取配置集合类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Configuration[] getConfigurations()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.configurations == <span class="hljs-keyword">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.configurations = createConfigurations();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.configurations;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建配置集合</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> Configuration[] createConfigurations();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否修改</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isModified</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (Configuration configuration : getConfigurations())<br>        &#123;<br>            <span class="hljs-keyword">if</span> (configuration.isModified())<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.isModified();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 应用程序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ConfigurationException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">apply</span><span class="hljs-params">()</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> ConfigurationException</span><br><span class="hljs-function">    </span>&#123;<br>        T settingsEditor = (T) getSettingsEditor();<br>        <span class="hljs-keyword">if</span> (((<span class="hljs-keyword">this</span> <span class="hljs-keyword">instanceof</span> TopLevelConfig)) &amp;&amp; (settingsEditor != <span class="hljs-keyword">null</span>))<br>        &#123;<br>            GUIUtil.stopTableCellEditing(settingsEditor.getComponent());<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Configuration configuration : getConfigurations())<br>        &#123;<br>            configuration.apply();<br>        &#125;<br>        <span class="hljs-keyword">super</span>.apply();<br>        onApply();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 重置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (Configuration configuration : getConfigurations())<br>        &#123;<br>            configuration.reset();<br>        &#125;<br>        <span class="hljs-keyword">super</span>.reset();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放UI资源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">disposeUIResources</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (Configuration configuration : getConfigurations())<br>        &#123;<br>            configuration.disposeUIResources();<br>        &#125;<br>        <span class="hljs-keyword">super</span>.disposeUIResources();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readConfiguration</span><span class="hljs-params">(Element element)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Configuration[] configurations = getConfigurations();<br>        <span class="hljs-keyword">for</span> (Configuration configuration : configurations)<br>        &#123;<br>            readConfiguration(element,configuration);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeConfiguration</span><span class="hljs-params">(Element element)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Configuration[] configurations = getConfigurations();<br>        <span class="hljs-keyword">for</span> (Configuration configuration : configurations)<br>        &#123;<br><br>            writeConfiguration(element,configuration);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>基础配置部分大致就这么多了，下一节，具体分析一下各个配置项。</p>]]></content>
    
    
    <categories>
      
      <category>个人作品</category>
      
      <category>IntelliJ Plugin For Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij Plugin</tag>
      
      <tag>Hadoop</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HadoopIntellijPlugin插件HDFS文件系统对象的设计与实现</title>
    <link href="/2017/08/01/IntellijPluginHadoop/007-IntellijPluginHadoop/"/>
    <url>/2017/08/01/IntellijPluginHadoop/007-IntellijPluginHadoop/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本节，简单介绍HDFS文件系统浏览器的文件系统对象。文件系统对象和HDFS文件系统对象一致，分为目录和文件，文件不再进行具体的区分文件类型。文件系统对象在UI上表现为文件系统树上的节点。FileSystemObject整个设计的类图如下：<br><img src="1.png"></p><h2 id="文件系统对象的接口定义-FileSystemObject"><a href="#文件系统对象的接口定义-FileSystemObject" class="headerlink" title="文件系统对象的接口定义 FileSystemObject"></a>文件系统对象的接口定义 FileSystemObject</h2><p>&emsp;&emsp;文件系统对象在UI上表现为树节点，因此该接口需要继承自定义的树节点接口FileSystemBrowserTreeNode接口。FileSystemObject接口定义了文件系统对象的相关属性和方法，包括显示的名称、图标、对象类型（目录还是文件）、关联的连接处理对象、父对象等等。直接贴代码了：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义文件系统对象接口</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-15.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span>  <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FileSystemObject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FileSystemBrowserTreeNode</span>,<span class="hljs-title">DynamicContentElement</span>,</span><br><span class="hljs-class">        <span class="hljs-title">Referenceable</span>, <span class="hljs-title">PresentableConnectionProvider</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统对象类型</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">FileSystemObjectType <span class="hljs-title">getObjectType</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统对象的名称</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-function">String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件系统对象是否加载过</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getOverload</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统对象的类型名称</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">getTypeName</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统对象的图标</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-function">Icon <span class="hljs-title">getIcon</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统对象的连接处理对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-function">ConnectionHandler <span class="hljs-title">getConnectionHandler</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统对象的父对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">FileSystemObject <span class="hljs-title">getParentObject</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统对象的集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-function">FileSystemObjectBundle <span class="hljs-title">getObjectBundle</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 获取导航默认对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-function">FileSystemObject <span class="hljs-title">getDefaultNavigationObject</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取未能进行释放的文件系统对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-function">FileSystemObject <span class="hljs-title">getUndisposedElement</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统对象的属性</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">FileSystemObjectProperties <span class="hljs-title">getProperties</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统对象可呈现的属性集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;PresentableProperty&gt; <span class="hljs-title">getPresentableProperties</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统对象的引用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">FileSystemObjectRef <span class="hljs-title">getRef</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对象是否已验证</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统对象的父对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-function">FileSystemBrowserTreeNode <span class="hljs-title">getParent</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="HDFS根目录对象FileSystemObjectBundle接口定义"><a href="#HDFS根目录对象FileSystemObjectBundle接口定义" class="headerlink" title="HDFS根目录对象FileSystemObjectBundle接口定义"></a>HDFS根目录对象FileSystemObjectBundle接口定义</h2><p>&emsp;&emsp;我们把HDFS根目录”/“ 下的对象（目录也好文件也好）单独拿出来，定义成FileSystemObjectBundle，这样设计是为后面读取HDFS对象方便绑定到UI上进行显示，他也是TreeNode，因此也继承了FileSystemBrowserTreeNode，他只是个标志，并拥有 获取根节点对象的数据连接处理对象。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义文件系统对象的集合，这里特指HDFS中的根目录对象&quot;/&quot;</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-15.</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FileSystemObjectBundle</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">FileSystemBrowserTreeNode</span>, <span class="hljs-title">Disposable</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统连接对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ConnectionHandler <span class="hljs-title">getConnectionHandler</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="文件系统对象的抽象实现-FileSystemObjectImpl"><a href="#文件系统对象的抽象实现-FileSystemObjectImpl" class="headerlink" title="文件系统对象的抽象实现 FileSystemObjectImpl"></a>文件系统对象的抽象实现 FileSystemObjectImpl</h2><h3 id="抽象实现类中，有两个构造函数："><a href="#抽象实现类中，有两个构造函数：" class="headerlink" title="抽象实现类中，有两个构造函数："></a>抽象实现类中，有两个构造函数：</h3><p>1、该构造函数以文件系统对象的父对象、HDFS的FIleStatus和对象的名称为参数</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化文件系统对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parentObject 父对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> HDFSFileStatus HDFS的文件状态对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name 对象的名称</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">FileSystemObjectImpl</span><span class="hljs-params">(FileSystemObject parentObject,</span></span><br><span class="hljs-function"><span class="hljs-params">                               org.apache.hadoop.fs.FileStatus HDFSFileStatus, String name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>.connectionHandlerRef = ConnectionHandlerRef.from(parentObject.getConnectionHandler());<br>    <span class="hljs-keyword">this</span>.parentObjectRef = FileSystemObjectRef.from(parentObject);<br>    <span class="hljs-keyword">this</span>.name = name;<br>    init(HDFSFileStatus,<span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、该构造函数以文件系统对象连接处理对象、HDFS的FIleStatus和对象的名称为参数，当读取HDFS的根目录“/”对象的时候，调用该构造函数，除此之外，调用构造函数1</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化文件系统对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> connectionHandler 文件对象的连接处理类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> HDFSFileStatus  HDFS的文件状态对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name 对象的名称</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">FileSystemObjectImpl</span><span class="hljs-params">(ConnectionHandler connectionHandler,</span></span><br><span class="hljs-function"><span class="hljs-params">                               org.apache.hadoop.fs.FileStatus HDFSFileStatus, String name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>.connectionHandlerRef = ConnectionHandlerRef.from(connectionHandler);<br>    <span class="hljs-keyword">this</span>.name = name;<br>    init(HDFSFileStatus,connectionHandler);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法 init(org.apache.hadoop.fs.FileStatus HDFSFileStatus,ConnectionHandler connectionHandler)，构建对象的引用，并且读取对象的相关信息，目录或文件的创建者、文件目录大小、文件目录路径等等。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化，获取HDFS系统的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> HDFSFileStatus</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> connectionHandler</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(org.apache.hadoop.fs.FileStatus HDFSFileStatus,ConnectionHandler connectionHandler)</span></span><br><span class="hljs-function"></span>&#123;<br>    FileSystemObjectType fileSystemObjectType = HDFSFileStatus.isDirectory()? FileSystemObjectType.DIRECTORY: FileSystemObjectType.FILE;<br>    <span class="hljs-keyword">this</span>.objectRef = <span class="hljs-keyword">new</span> FileSystemObjectRef(<span class="hljs-keyword">this</span>, fileSystemObjectType,connectionHandler);<br>    fileSystemInform = HDFSUtil.getFileSystemInformation(HDFSFileStatus);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="内部构建子对象"><a href="#内部构建子对象" class="headerlink" title="内部构建子对象"></a>内部构建子对象</h3><p>&emsp;&emsp;获取该对象的全部子对象，使用多线程的方式，获取其子对象，调用抽象方法（该抽象方法在具体的对象实现类中去重写） ：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> List&lt;FileSystemBrowserTreeNode&gt; <span class="hljs-title">buildAllPossibleTreeChildren</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">public</span> List&lt;? extends FileSystemBrowserTreeNode&gt; getChildren()<br>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.visibleTreeChildren == <span class="hljs-keyword">null</span>)<br>    &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.visibleTreeChildren == <span class="hljs-keyword">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.visibleTreeChildren = <span class="hljs-keyword">new</span> ArrayList();<br>                <span class="hljs-keyword">this</span>.visibleTreeChildren.add(<span class="hljs-keyword">new</span> LoadInProgressTreeNode(<span class="hljs-keyword">this</span>));<br>                ConnectionHandler connectionHandler = getConnectionHandler();<br>                String connectionString = connectionHandler == <span class="hljs-keyword">null</span> ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot; (&quot;</span> + connectionHandler.getName() + <span class="hljs-string">&quot;)&quot;</span>;<br>                <span class="hljs-keyword">new</span> BackgroundTask(getProject(), <span class="hljs-string">&quot;Loading data &quot;</span> + connectionString, <span class="hljs-keyword">true</span>)<br>                &#123;<br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> ProgressIndicator progressIndicator)</span></span><br><span class="hljs-function">                    </span>&#123;<br>                        buildTreeChildren(<span class="hljs-keyword">false</span>);<br>                    &#125;<br>                &#125;.start();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.visibleTreeChildren;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;内部构建子对象：首先获取全部可能的对象，然后遍历对象，进行对象的初始化，判断是否是加载数据节点，是的话，删除该节点，并设置该对象的子对象加载完毕标志，最后，触发通知，TreeNode已经修改，需要重新加载该对象。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildTreeChildren</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> isreBuild)</span></span><br><span class="hljs-function"></span>&#123;<br>    FailsafeUtil.check(<span class="hljs-keyword">this</span>);<br>    List&lt;FileSystemBrowserTreeNode&gt; allPossibleTreeChildren = getAllPossibleTreeChildren(isreBuild);<br>    List&lt;FileSystemBrowserTreeNode&gt; newTreeChildren = allPossibleTreeChildren;<br>    <span class="hljs-keyword">if</span> (allPossibleTreeChildren.size() &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        newTreeChildren = <span class="hljs-keyword">new</span> ArrayList(newTreeChildren);<br>        <span class="hljs-keyword">for</span> (FileSystemBrowserTreeNode treeNode : newTreeChildren)<br>        &#123;<br>            FileSystemObject objectList = (FileSystemObject) treeNode;<br>            objectList.initTreeElement();<br>            FailsafeUtil.check(<span class="hljs-keyword">this</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">this</span>.visibleTreeChildren.size() == <span class="hljs-number">1</span>) &amp;&amp; ((<span class="hljs-keyword">this</span>.visibleTreeChildren.get(<span class="hljs-number">0</span>) <span class="hljs-keyword">instanceof</span> LoadInProgressTreeNode)))<br>        &#123;<br>            <span class="hljs-keyword">this</span>.visibleTreeChildren.get(<span class="hljs-number">0</span>).dispose();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">this</span>.visibleTreeChildren = newTreeChildren;<br>    <span class="hljs-keyword">this</span>.treeChildrenLoaded = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-comment">//通知TreeNode修改，需要重新加载</span><br>    Project project = FailsafeUtil.get(getProject());<br>    ( EventUtil.notify(project, BrowserTreeEventListener.TOPIC)).nodeChanged(<span class="hljs-keyword">this</span>, TreeEventType.STRUCTURE_CHANGED);<br>    FileSystemBrowserManager.scrollToSelectedElement(getConnectionHandler());<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="HDFS的目录和文件对象的实现-HadoopDirectoryObject-、HadoopFileObject"><a href="#HDFS的目录和文件对象的实现-HadoopDirectoryObject-、HadoopFileObject" class="headerlink" title="HDFS的目录和文件对象的实现 HadoopDirectoryObject 、HadoopFileObject"></a>HDFS的目录和文件对象的实现 HadoopDirectoryObject 、HadoopFileObject</h2><h3 id="HDFS目录对象的实现HadoopDirectoryObject。"><a href="#HDFS目录对象的实现HadoopDirectoryObject。" class="headerlink" title="HDFS目录对象的实现HadoopDirectoryObject。"></a>HDFS目录对象的实现HadoopDirectoryObject。</h3><p>&emsp;&emsp;继承抽象类FileSystemObjectImpl和，重写对象类型、HDFS目录所在的路径、获取目录对象的子对象。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义HDFS目录对象</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-17.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HadoopDirectoryObject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FileSystemObjectImpl</span></span><br><span class="hljs-class"></span>&#123;<br>   <span class="hljs-keyword">private</span> List&lt;FileSystemBrowserTreeNode&gt; fileSystemBrowserTreeNodeLists =<span class="hljs-keyword">null</span>;<br>   <span class="hljs-keyword">private</span> org.apache.hadoop.fs.FileStatus fileStatus=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化 HDFS目录对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parentObject 父对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultSet HDFS的FileStatus</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 对象的名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HadoopDirectoryObject</span><span class="hljs-params">(FileSystemObject parentObject,</span></span><br><span class="hljs-function"><span class="hljs-params">                                 org.apache.hadoop.fs.FileStatus resultSet, String name)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">super</span>(parentObject,resultSet,name);<br>        fileStatus = resultSet;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化HDFS目录对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> connectionHandler 对象的连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultSet HDFS的FileStatus</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 对象的名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HadoopDirectoryObject</span><span class="hljs-params">(ConnectionHandler connectionHandler,</span></span><br><span class="hljs-function"><span class="hljs-params">                                 org.apache.hadoop.fs.FileStatus resultSet, String name)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">super</span>(connectionHandler,resultSet,name);<br>        fileStatus = resultSet;<br>        fileSystemBrowserTreeNodeLists = <span class="hljs-keyword">new</span> ArrayList();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取对象的类型 这里是目录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> FileSystemObjectType <span class="hljs-title">getObjectType</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> FileSystemObjectType.DIRECTORY;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取目录对象的HDFS路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getLocationString</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> fileStatus.getPath().toString();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 重写，构建目录的下面的子对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;FileSystemBrowserTreeNode&gt; <span class="hljs-title">buildAllPossibleTreeChildren</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>&#123;<br>      ConnectionHandler connectionHandler = getConnectionHandler();<br>      FileSystem fileSystem = connectionHandler.getMainFileSystem();<br>       <span class="hljs-keyword">try</span><br>       &#123;<br>           String path = fileStatus.getPath().toString();<br>           FileStatus[] fileStatuses = fileSystem.listStatus(<span class="hljs-keyword">new</span> Path(fileStatus.getPath().toString()));<br>           FileSystemBrowserTreeNode[] fileSystemBrowserTreeNodes = <span class="hljs-keyword">new</span> FileSystemBrowserTreeNode[fileStatuses.length];<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; fileStatuses.length; i++)<br>           &#123;<br>               FileStatus f = fileStatuses[i];<br>               <span class="hljs-keyword">if</span> (f.isDirectory())<br>               &#123;<br>                   FileSystemObject dirdbObject = <span class="hljs-keyword">new</span> HadoopDirectoryObject(<span class="hljs-keyword">this</span>, f,f.getPath().getName());<br>                   fileSystemBrowserTreeNodes[i] = dirdbObject;<br>               &#125; <span class="hljs-keyword">else</span><br>               &#123;<br>                   FileSystemObject filedbObject = <span class="hljs-keyword">new</span> HadoopFileObject(<span class="hljs-keyword">this</span>, f,f.getPath().getName());<br>                   fileSystemBrowserTreeNodes[i] = filedbObject;<br>               &#125;<br>           &#125;<br>           fileSystemBrowserTreeNodeLists = FileSystemBrowserUtils.createList(fileSystemBrowserTreeNodes);<br>       &#125;<br>       <span class="hljs-keyword">catch</span> (Exception ex)<br>       &#123;<br><br>       &#125;<br>       <span class="hljs-keyword">return</span> fileSystemBrowserTreeNodeLists;<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HDFS的文件对象的实现HadoopFileObject。"><a href="#HDFS的文件对象的实现HadoopFileObject。" class="headerlink" title="HDFS的文件对象的实现HadoopFileObject。"></a>HDFS的文件对象的实现HadoopFileObject。</h3><p>&emsp;&emsp;和目录实现一样，唯一区别是 对象类型是文件类型并且文件是没有子对象的，但也要重写：<br>public List<FileSystemBrowserTreeNode> buildAllPossibleTreeChildren()<br>并且不能返回NULL。 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义HDFS文件对象</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-17.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HadoopFileObject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FileSystemObjectImpl</span></span><br><span class="hljs-class"></span>&#123;<br>   <span class="hljs-keyword">private</span> List&lt;FileSystemBrowserTreeNode&gt; fileSystemBrowserTreeNodes =<span class="hljs-keyword">null</span>;<br>   <span class="hljs-keyword">private</span> FileStatus fileStatus;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化HDFS文件对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parentObject 父对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultSet HDFS的FIleStatus</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 文件名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HadoopFileObject</span><span class="hljs-params">(FileSystemObject parentObject,</span></span><br><span class="hljs-function"><span class="hljs-params">                            org.apache.hadoop.fs.FileStatus resultSet, String name)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">super</span>(parentObject, resultSet,name);<br>        fileSystemBrowserTreeNodes = <span class="hljs-keyword">new</span> ArrayList();<br>        fileStatus = resultSet;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化HDFS的文件对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> connectionHandler 连接处理对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultSet HDFS的FIleStatus</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 文件名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HadoopFileObject</span><span class="hljs-params">(ConnectionHandler connectionHandler,</span></span><br><span class="hljs-function"><span class="hljs-params">                            org.apache.hadoop.fs.FileStatus resultSet, String name)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">super</span>(connectionHandler, resultSet,name);<br>        fileSystemBrowserTreeNodes = <span class="hljs-keyword">new</span> ArrayList();<br>        fileStatus = resultSet;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取HDFS文件所在的路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getLocationString</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> fileStatus.getPath().toString();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取对象类型，这里是文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FileSystemObjectType <span class="hljs-title">getObjectType</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> FileSystemObjectType.FILE;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件没有子对象，但不能给NULL</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;FileSystemBrowserTreeNode&gt; <span class="hljs-title">buildAllPossibleTreeChildren</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> fileSystemBrowserTreeNodes;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="HDFS的根目录对象的实现FileSystemObjectBundleImpl。"><a href="#HDFS的根目录对象的实现FileSystemObjectBundleImpl。" class="headerlink" title="HDFS的根目录对象的实现FileSystemObjectBundleImpl。"></a>HDFS的根目录对象的实现FileSystemObjectBundleImpl。</h2><p>&emsp;&emsp;该类继承树节点的抽象类FileSystemBrowserTreeNodeBase和FileSystemObjectBundle接口。该类，重点关注，怎么读取HDFS的根目录“/”对象，获取其数据进行绑定的。该类只有一个构造函数，在构造函数中通过 loadData()开始HDFS根目录的数据加载。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> connectionHandler 连接处理接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> treeParent 父节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileSystemObjectBundleImpl</span><span class="hljs-params">(ConnectionHandler connectionHandler, FileSystemBrowserTreeNode treeParent)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>.connectionHandler = connectionHandler;<br>    <span class="hljs-keyword">this</span>.treeParent = treeParent;<br>    loadData();<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 重新加载数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//获取根节点下的所有文件和目录 创建 节点</span><br>    fileSystem = connectionHandler.getMainFileSystem();<br>    <span class="hljs-keyword">if</span>(connectionHandler.getConnectionStatus().isConnected())<br>    &#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>( <span class="hljs-keyword">this</span>.allPossibleTreeChildren!=<span class="hljs-keyword">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.allPossibleTreeChildren.clear();<br>            &#125;<br>            FileStatus[] fileStatuses = fileSystem.listStatus(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">&quot;/&quot;</span>));<br>            FileSystemBrowserTreeNode[] fileSystemBrowserTreeNodes = <span class="hljs-keyword">new</span> FileSystemBrowserTreeNode[fileStatuses.length];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; fileStatuses.length; i++)<br>            &#123;<br>                FileStatus f = fileStatuses[i];<br>                <span class="hljs-keyword">if</span> (f.isDirectory())<br>                &#123;<br>                    <span class="hljs-comment">//如果是目录，实例化目录对象</span><br>                    FileSystemObject dirdbObject = <span class="hljs-keyword">new</span> HadoopDirectoryObject(connectionHandler, f, f.getPath().getName());<br>                    fileSystemBrowserTreeNodes[i] = dirdbObject;<br>                &#125; <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">//如果是文件，实例化文件对象</span><br>                    FileSystemObject filedbObject = <span class="hljs-keyword">new</span> HadoopFileObject(connectionHandler, f, f.getPath().getName());<br>                    fileSystemBrowserTreeNodes[i] = filedbObject;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">this</span>.allPossibleTreeChildren = FileSystemBrowserUtils.createList(fileSystemBrowserTreeNodes);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex)<br>        &#123;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>( <span class="hljs-keyword">this</span>.allPossibleTreeChildren!=<span class="hljs-keyword">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.allPossibleTreeChildren.clear();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>个人作品</category>
      
      <category>IntelliJ Plugin For Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij Plugin</tag>
      
      <tag>Hadoop</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HadoopIntellijPlugin插件HDFS文件系统连接Connection设计和实现</title>
    <link href="/2017/07/31/IntellijPluginHadoop/006-IntellijPluginHadoop/"/>
    <url>/2017/07/31/IntellijPluginHadoop/006-IntellijPluginHadoop/</url>
    
    <content type="html"><![CDATA[<p> &emsp;&emsp;本节，主要介绍Hadoop-IntelliJ-Plugin 的HDFS连接处理的设计和实现。主要包括HDFS连接Connection的接口定义、HDFS连接的实现、HDFS连接的缓存处理、和连接相关配置项。整个类的设计如下：<br><img src="1.png"></p><h2 id="HDFS连接接口ConnectionHandler和其实现类ConnectionHandlerImpl"><a href="#HDFS连接接口ConnectionHandler和其实现类ConnectionHandlerImpl" class="headerlink" title="HDFS连接接口ConnectionHandler和其实现类ConnectionHandlerImpl"></a>HDFS连接接口ConnectionHandler和其实现类ConnectionHandlerImpl</h2><h3 id="ConnectionHandler接口。"><a href="#ConnectionHandler接口。" class="headerlink" title="ConnectionHandler接口。"></a>ConnectionHandler接口。</h3><p>&emsp;&emsp;该接口主要定义了获取HDFS连接对象Configuration、HDFS文件系统对象FileSystem、设置连接的相关信息、获取连接关联的文件系统对象的集合、获取连接对应的文件系统版本、判断HDFS文件系统是否可以连接上、测试HDFS连接、获取HDFS连接的状态等。接口定义的代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义文件系统的连接处理接口</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-15.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ConnectionHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Disposable</span>,<span class="hljs-title">ConnectionProvider</span>, <span class="hljs-title">Presentable</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取当前的intellij的工程</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Project <span class="hljs-title">getProject</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试HDFS是否可以连接</span><br><span class="hljs-comment">     *<span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">createTestConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取当前HDFS的连接Configuration对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Configuration <span class="hljs-title">getMainConnection</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取当前连接的HDFS文件系统对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">FileSystem <span class="hljs-title">getMainFileSystem</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接状态</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ConnectionStatus <span class="hljs-title">getConnectionStatus</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ConnectionInfo <span class="hljs-title">getConnectionInfo</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置连接字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramConnectionInfo</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setConnectionInfo</span><span class="hljs-params">(ConnectionInfo paramConnectionInfo)</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接是否激活</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isActive</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接对应的文件系统</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">FileSystemType <span class="hljs-title">getFileSystemType</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统版本</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getFileSystemVersion</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接是否连接上</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isConnected</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getIdleMinutes</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件系统的相关信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">FileSystemInfo <span class="hljs-title">getFileSystemInfo</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">disconnect</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接的ID</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接的用户名称</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">getUserName</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接显示名称</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">getPresentableText</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接引用对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ConnectionHandlerRef <span class="hljs-title">getRef</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否是虚拟连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isVirtual</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接加载监控对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ConnectionLoadMonitor <span class="hljs-title">getLoadMonitor</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接集合</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ConnectionBundle <span class="hljs-title">getConnectionBundle</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否可连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">canConnect</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *是否是有效连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramBoolean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> paramBoolean)</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否是有效连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *连接关联对象的集合</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function">FileSystemObjectBundle <span class="hljs-title">getObjectBundle</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function">Filter&lt;FileSystemBrowserTreeNode&gt; <span class="hljs-title">getObjectTypeFilter</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ConnectionSettings <span class="hljs-title">getSettings</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HDFS连接的实现ConnectionHandlerImpl"><a href="#HDFS连接的实现ConnectionHandlerImpl" class="headerlink" title="HDFS连接的实现ConnectionHandlerImpl"></a>HDFS连接的实现ConnectionHandlerImpl</h3><p>&emsp;&emsp;在实现类中，我们重点看下 如何通过外部配置实现连接到HDFS的。在实现类初始化方法中，首先创建一个HDFS的Configuration对象，由于IDEA插件的启动是由IDEA框架去自动维护，HDFS读取配置的时候是默认当前线程类的加载器，这里其实就是IDEA的主程序的线程，也就是说，如果使用IDEA的主线程类的加载器加载HDFS配置，那么在运行的时候，HDFS实例化的时候会找不到HDFS 的相关的jar 包。因此这里需要绕一下，IDEA框架启动装配插件后，在插件初始化HDFS配置代码处，重新设置HDFS配置的类加载器，然后再设置Configuration的相关配置对象，这样才能从插件路径下找到HDFS的jar包。设置HDFS的Configuration后，调用HDFS的FileSystem.get(Configuration) ，获取到HDFS的文件系统对象FileSystem，然后测试HDFS是否能够连接上。测试HDFS连接，这里实现比较简单，使用FileSystem.exties(path)  判断根目录”/“，是否存在即可。如果“/”目录不存在或者该方法如果抛出一个IOException 异常，表明HDFS因某种原因，连接不上。代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化连接实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> connectionBundle</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> connectionSettings</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConnectionHandlerImpl</span><span class="hljs-params">(ConnectionBundle connectionBundle, ConnectionSettings connectionSettings)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>.connectionBundle = connectionBundle;<br>    <span class="hljs-keyword">this</span>.connectionSettings = connectionSettings;<br>    configurationHdfs = <span class="hljs-keyword">new</span> Configuration(<span class="hljs-keyword">false</span>);<br>    ClassLoader pClassLoader=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        pClassLoader= Class.forName(com.fangyuzhong.intelliJ.hadoop.fsconnection.ConnectionManager.class.getName()).getClassLoader();<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception ex)<br>    &#123;<br>        LOGGER.error(<span class="hljs-string">&quot;获取当前类的加载器错误&quot;</span>,ex);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pClassLoader!=<span class="hljs-keyword">null</span>)<br>    &#123;<br>        String hdfsPath = connectionSettings.getFileSystemSettings().getHDFSUrl();<br>        String yarnResourceAMPath = connectionSettings.getFileSystemSettings().getMapReducelUrl();<br>        <span class="hljs-keyword">if</span>(!StringUtil.isEmptyOrSpaces(hdfsPath))<br>        &#123;<br>            <span class="hljs-comment">//设置HDFS的配置类加载器</span><br>            configurationHdfs.setClassLoader(pClassLoader);<br>            <span class="hljs-comment">//设置HDFS相关属性</span><br>            configurationHdfs.set(Constants.FS_HDFS_IMPL_KEY, Constants.FS_HDFS_IMPL_VALUE);<br>            configurationHdfs.set(Constants.FS_FILE_IMPL_KEY,Constants.FS_FILE_IMPL_VALUE);<br>            configurationHdfs.set(Constants.FS_DEFAULTFS_KEY, hdfsPath);<br>            configurationHdfs.set(Constants.YARN_RESOURCEMANAGER_SCHEDULER_ADDRESS,yarnResourceAMPath);<br>            <span class="hljs-comment">//通过配置初始化HDFS的FileSystem</span><br>            InitiFileSystem(configurationHdfs);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        canConnection = createTestConnection();<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (IOException ex)<br>    &#123;<br>        canConnection=<span class="hljs-keyword">false</span>;<br>        LOGGER.error(<span class="hljs-string">&quot;创建连接测试异常&quot;</span>,ex);<br>    &#125;<br>    connectionInfo = <span class="hljs-keyword">new</span> ConnectionInfo(connectionSettings);<br>    connectionStatus = <span class="hljs-keyword">new</span> ConnectionStatus();<br>    ref = <span class="hljs-keyword">new</span> ConnectionHandlerRef(<span class="hljs-keyword">this</span>);<br>    connectionStatus.setConnected(canConnection);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span>  <span class="hljs-title">InitiFileSystem</span><span class="hljs-params">(Configuration configuration)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        fileSystem = FileSystem.get(configuration);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception ex)<br>    &#123;<br>        LOGGER.error(<span class="hljs-string">&quot;通过configuration获取HDFS系统对象异常&quot;</span>,ex);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">createTestConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">boolean</span> canConnection = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (fileSystem == <span class="hljs-keyword">null</span>)<br>    &#123;<br>        canConnection = <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        canConnection = fileSystem.exists(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">&quot;/&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> canConnection;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;该类中还有个重要的方法：FileSystemObjectBundle getObjectBundle()，标示该连接到HDFS后，获取根目录下所有的对象，包括目录和文件对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *获取连接对应的HDFS根目录下所有的对象集合 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FileSystemObjectBundle <span class="hljs-title">getObjectBundle</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (objectBundle == <span class="hljs-keyword">null</span>)<br>    &#123;<br>        objectBundle = <span class="hljs-keyword">new</span> FileSystemObjectBundleImpl(<span class="hljs-keyword">this</span>, connectionBundle);<br>    &#125;<br>    <span class="hljs-keyword">return</span> objectBundle;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>关于类FIleSystemObjectBundleImpl 将在后面介绍文件系统对象的时候介绍。</p><h2 id="ConnectionBundle类，表示连接集合。"><a href="#ConnectionBundle类，表示连接集合。" class="headerlink" title="ConnectionBundle类，表示连接集合。"></a>ConnectionBundle类，表示连接集合。</h2><p>&emsp;&emsp;用户可以进行多个HDFS连接设置，这样就会产生多个连接Connection，那使用ConnectionBundle类来定义和处理这些连接。ConnectionBundle类继承FIleSystemBrowserTreeNodeBase，表示他也是个树节点，当用户选择以单个树多个根节点来展示的时候，ConnectionBundle就以节点的方式来展示。这里还要注意，实例化 ConnectionBundle的时候，默认加载一个虚拟的连接 virtualConnectons对象。相关代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConnectionBundle</span><span class="hljs-params">(Project project)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>.projectRef = <span class="hljs-keyword">new</span> ProjectRef(project);<br>    <span class="hljs-keyword">this</span>.virtualConnections.add(<span class="hljs-keyword">new</span> VirtualConnectionHandler(<span class="hljs-string">&quot;virtual-hdfs-fsconnection&quot;</span>,<br>          <span class="hljs-string">&quot;Virtual - hdfs 3.0&quot;</span>, FileSystemType.HDFS,<span class="hljs-number">3.0</span>, project));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加连接到集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> connectionHandler</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addConnection</span><span class="hljs-params">(ConnectionHandler connectionHandler)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>.connectionHandlers.add(connectionHandler);<br>    Disposer.register(<span class="hljs-keyword">this</span>, connectionHandler);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="HDFS连接Connection的管理类-ConnectionManager。"><a href="#HDFS连接Connection的管理类-ConnectionManager。" class="headerlink" title="HDFS连接Connection的管理类 ConnectionManager。"></a>HDFS连接Connection的管理类 ConnectionManager。</h2><p>&emsp;&emsp;ConnectionManager属于Project级别插件,实现了抽象类AbstractProjectComponent，维护整个HDFS的连接管理，包括：连接配置修改后，重新构建UI对象更新Connection连接、获取连接的集合ConnectionBundle、测试HDFS连接、根据连接的ID获取ConnectionHandle 等等。相关代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取ConnectionManager对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConnectionManager <span class="hljs-title">getInstance</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Project project)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> getComponent(project);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *获取ConnectionManager对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConnectionManager <span class="hljs-title">getComponent</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Project project)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">return</span> FailsafeUtil.getComponent(project, ConnectionManager.class);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ConnectionManager</span><span class="hljs-params">(Project project)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">super</span>(project);<br>    <span class="hljs-keyword">this</span>.connectionBundle = ConnectionBundleSettings.getInstance(getProject()).getConnectionBundle()<br>    Disposer.register(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.connectionBundle);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化加载</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initComponent</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">super</span>.initComponent();<br>    Project project = getProject();<br>    <span class="hljs-comment">//注册连接配置修改监听</span><br>    EventUtil.subscribe(project, <span class="hljs-keyword">this</span>, ConnectionSettingsListener.TOPIC, <span class="hljs-keyword">this</span>.connectionSettingsListener);<br>    <span class="hljs-keyword">this</span>.idleConnectionCleaner = <span class="hljs-keyword">new</span> Timer(<span class="hljs-string">&quot;HDFS - Idle Connection Cleaner [&quot;</span> + project.getName() + <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">this</span>.idleConnectionCleaner.schedule(<span class="hljs-keyword">new</span> CloseIdleConnectionTask(), TimeUtil.ONE_MINUTE, TimeUtil.ONE_MINUTE);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">连接配置修改后处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> ConnectionSettingsListener connectionSettingsListener = <span class="hljs-keyword">new</span> ConnectionSettingsAdapter()<br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connectionChanged</span><span class="hljs-params">(String connectionId)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">final</span> ConnectionHandler connectionHandler = getConnectionHandler(connectionId);<br>        connectionHandler.getObjectBundle().refreshTreeChildren();<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="HDFS连接connection缓存类-ConnectionCache"><a href="#HDFS连接connection缓存类-ConnectionCache" class="headerlink" title="HDFS连接connection缓存类 ConnectionCache"></a>HDFS连接connection缓存类 ConnectionCache</h2><p>&emsp;&emsp;ConnectionCache，缓存类，使用HashMap 以连接的ID为Key，对应的连接ConfigurationHandler为Value进行存储。该类是Application级别的插件，IDEA启动时进行初始化。该类中提供按照连接的ID查找连接ConnectionHandler。初始化时注册了Project生命周期的相关事件处理。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义HDFS连接的缓存类，Application级别插件，IDEA系统启动进行初始化</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-15.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConnectionCache</span></span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationComponent</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     使用HashMap 来存储Connection的缓存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, ConnectionHandler&gt; CACHE = <span class="hljs-keyword">new</span> THashMap();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据connection的ID查找ConnectionHandler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> connectionId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConnectionHandler <span class="hljs-title">findConnectionHandler</span><span class="hljs-params">(String connectionId)</span></span><br><span class="hljs-function">    </span>&#123;<br>        ConnectionHandler connectionHandler =  CACHE.get(connectionId);<br>        ProjectManager projectManager = ProjectManager.getInstance();<br>        <span class="hljs-keyword">if</span> ((connectionHandler == <span class="hljs-keyword">null</span>) &amp;&amp; (projectManager != <span class="hljs-keyword">null</span>))<br>        &#123;<br>            <span class="hljs-keyword">synchronized</span> (ConnectionCache.class)<br>            &#123;<br>                connectionHandler = CACHE.get(connectionId);<br>                <span class="hljs-keyword">if</span> (connectionHandler == <span class="hljs-keyword">null</span>)<br>                &#123;<br>                    <span class="hljs-keyword">for</span> (Project project : projectManager.getOpenProjects())<br>                    &#123;<br>                        ConnectionManager connectionManager = ConnectionManager.getInstance(project);<br>                        connectionHandler = connectionManager.getConnectionHandler(connectionId);<br>                        <span class="hljs-keyword">if</span> ((connectionHandler != <span class="hljs-keyword">null</span>) &amp;&amp; (!connectionHandler.isDisposed()))<br>                        &#123;<br>                            CACHE.put(connectionId, connectionHandler);<br>                            <span class="hljs-keyword">return</span> connectionHandler;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (connectionHandler == <span class="hljs-keyword">null</span>) || (connectionHandler.isDisposed()) ? <span class="hljs-keyword">null</span> : connectionHandler;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化插件组件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initComponent</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//注册项目生命周期通知</span><br>        EventUtil.subscribe(<span class="hljs-keyword">null</span>, ProjectLifecycleListener.TOPIC, <span class="hljs-keyword">this</span>.projectLifecycleListener);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">disposeComponent</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponentName</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;HadoopNavigator.ConnectionCache&quot;</span>;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义工程项目的生命周期处理事件类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ProjectLifecycleListener projectLifecycleListener = <span class="hljs-keyword">new</span> ProjectLifecycleListener.Adapter()<br>    &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 工程Project组件初始化后处理</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">projectComponentsInitialized</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Project project)</span></span><br><span class="hljs-function">        </span>&#123;<br>            ConnectionManager connectionManager = ConnectionManager.getInstance(project);<br>            <span class="hljs-keyword">if</span> (connectionManager == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;<br>            List&lt;ConnectionHandler&gt; connectionHandlers = connectionManager.getConnectionHandlers();<br>            <span class="hljs-keyword">for</span> (ConnectionHandler connectionHandler : connectionHandlers)<br>            &#123;<br>                ConnectionCache.CACHE.put(connectionHandler.getId(), connectionHandler);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 关闭工程Project后处理</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterProjectClosed</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Project project)</span></span><br><span class="hljs-function">        </span>&#123;<br>            Iterator&lt;String&gt; connectionIds = ConnectionCache.CACHE.keySet().iterator();<br>            <span class="hljs-keyword">while</span> (connectionIds.hasNext())<br>            &#123;<br>                String connectionId = (String) connectionIds.next();<br>                ConnectionHandler connectionHandler = (ConnectionHandler) ConnectionCache.CACHE.get(connectionId);<br>                <span class="hljs-keyword">if</span> ((connectionHandler.isDisposed()) || (connectionHandler.getProject() == project))<br>                &#123;<br>                    connectionIds.remove();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>个人作品</category>
      
      <category>IntelliJ Plugin For Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij Plugin</tag>
      
      <tag>Hadoop</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HadoopIntellijPlugin插件HDFS文件系统浏览器设计和实现3</title>
    <link href="/2017/07/30/IntellijPluginHadoop/005-IntellijPluginHadoop/"/>
    <url>/2017/07/30/IntellijPluginHadoop/005-IntellijPluginHadoop/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本节，简单介绍一下，HDFS文件系统浏览器的管理，FileSystemBrowserManager和扩展IDEA浮动面板的实现。</p><h2 id="文件系统浏览管理类：FileSystemBrowserManager"><a href="#文件系统浏览管理类：FileSystemBrowserManager" class="headerlink" title="文件系统浏览管理类：FileSystemBrowserManager"></a>文件系统浏览管理类：FileSystemBrowserManager</h2><p>&emsp;&emsp;FileSystemBrowserManager作用是在IDEA加载一个新的工程时，进行FileSystem的相关设置。他是Project级别的插件组件，实现了抽象类<br>AbstractProjectComponent，该类继承ApplicationAdapter、实现接口ProjectComponent、ProjectManagerListener。FileSystemBrowserManager需要进行持久化，因此还实现了 PersistentStateComponent接口。持久化文件使用 注解 @State、@Storage 来注明。<br>代码判断如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-meta">@State(name = &quot;HadoopNavigator.Project.FileSystemBrowserManager&quot;,</span><br><span class="hljs-meta">        storages = &#123;@Storage(file = &quot;$PROJECT_CONFIG_DIR$/hdfsnavigator.xml&quot;, scheme = StorageScheme.DIRECTORY_BASED),</span><br><span class="hljs-meta">                    @Storage(file = &quot;$PROJECT_FILE$&quot;)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileSystemBrowserManager</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProjectComponent</span></span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">PersistentStateComponent</span>&lt;<span class="hljs-title">Element</span>&gt;</span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><p>hdfsnavigator.xml 为持久化文件。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取活动的连接对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ConnectionHandler <span class="hljs-title">getActiveConnection</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    FileSystemBrowserTree activeBrowserTree = getActiveBrowserTree();<br>    <span class="hljs-keyword">if</span> (activeBrowserTree != <span class="hljs-keyword">null</span>)<br>    &#123;<br>        BrowserTreeModel browserTreeModel = activeBrowserTree.getModel();<br>        <span class="hljs-keyword">if</span> ((browserTreeModel <span class="hljs-keyword">instanceof</span> TabbedBrowserTreeModel))<br>        &#123;<br>            TabbedBrowserTreeModel tabbedBrowserTreeModel = (TabbedBrowserTreeModel) browserTreeModel;<br>            <span class="hljs-keyword">return</span> tabbedBrowserTreeModel.getConnectionHandler();<br>        &#125;<br>        FileSystemBrowserTreeNode browserTreeNode = activeBrowserTree.getSelectedNode();<br>        <span class="hljs-keyword">if</span> (browserTreeNode != <span class="hljs-keyword">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> browserTreeNode.getConnectionHandler();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取浮动面板对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@NotNull</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ToolWindow <span class="hljs-title">getBrowserToolWindow</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(getProject());<br>    <span class="hljs-keyword">return</span> toolWindowManager.getToolWindow(TOOL_WINDOW_ID);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取主窗体对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@NotNull</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> BrowserToolWindowForm <span class="hljs-title">getToolWindowForm</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.toolWindowForm.get();<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插件初始化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initComponent</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//注册监听器</span><br>    EventUtil.subscribe(<span class="hljs-keyword">null</span>, ProjectLifecycleListener.TOPIC, <span class="hljs-keyword">this</span>.projectLifecycleListener);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Project项目生命周期监听处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> ProjectLifecycleListener projectLifecycleListener = <span class="hljs-keyword">new</span> ProjectLifecycleListener()<br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">projectComponentsInitialized</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Project project)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//注册HDFS连接集合监听器</span><br>        EventUtil.subscribe(project,<span class="hljs-keyword">null</span>, ConnectionBundleSettingsListener.TOPIC,<span class="hljs-keyword">this</span>.connectionBundleSettingsListener);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ConnectionBundleSettingsListener connectionBundleSettingsListener  = <span class="hljs-keyword">new</span> ConnectionBundleSettingsListener()<br>    &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 重新构建UI</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">settingsChanged</span><span class="hljs-params">()</span></span><br><span class="hljs-function">        </span>&#123;<br>            getToolWindowForm().rebuild();<br>        &#125;<br>    &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="自定义IDEA的浮动面板插件。"><a href="#自定义IDEA的浮动面板插件。" class="headerlink" title="自定义IDEA的浮动面板插件。"></a>自定义IDEA的浮动面板插件。</h2><p>&emsp;&emsp;IDEA浮动面板，可以理解为 Tool Window。如要显示一个自定义的Tool Window，也很简单，首先，要自定义类，实现ToolWindowFactory接口，该接口有 一个方法 createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow)，在自定义类中重写。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义ToolWindow </span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-15.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileSystemBrowserToolWindowFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ToolWindowFactory</span>,<span class="hljs-title">DumbAware</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createToolWindowContent</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> Project project, <span class="hljs-meta">@NotNull</span> ToolWindow toolWindow)</span></span><br><span class="hljs-function">    </span>&#123;<br>        BrowserToolWindowForm toolWindowForm = FileSystemBrowserManager.getInstance(project).getToolWindowForm();<br>        ContentFactory contentFactory = <span class="hljs-keyword">new</span> ContentFactoryImpl();<br>        Content content = contentFactory.createContent(toolWindowForm.getComponent(), <span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);<br>        toolWindow.getContentManager().addContent(content);<br>        toolWindow.setIcon(Icons.FILE_SYSTEM_HDFS);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后，在插件配置文件扩展点节点，注册该类即可。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--插件扩展点--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">extensions</span> <span class="hljs-attr">defaultExtensionNs</span>=<span class="hljs-string">&quot;com.intellij&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 注册文件系统浏览器 FileSystemBrowser 的 Tool Window --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">toolWindow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Hadoop FileSystem&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;/img/hadoop-logo-16x16.png&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">anchor</span>=<span class="hljs-string">&quot;left&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">factoryClass</span>=<span class="hljs-string">&quot;com.fangyuzhong.intelliJ.hadoop.fsbrowser.FileSystemBrowserToolWindowFactory&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">extensions</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;设置显示的文字和相关图标。运行插件后，会在 IDEA的 View菜单—&gt; Tool Windows —-&gt; 显示 Hadoop FileSystem<br><img src="1.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;经过前面的几节和本节的内容，就已经把Hadoop的文件系统浏览器的界面UI这块说完了。后面的几节，将会介绍HDFS文件浏览器的其他设计和实现。</p>]]></content>
    
    
    <categories>
      
      <category>个人作品</category>
      
      <category>IntelliJ Plugin For Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij Plugin</tag>
      
      <tag>Hadoop</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HadoopIntellijPlugin插件HDFS文件系统浏览器设计和实现2</title>
    <link href="/2017/07/29/IntellijPluginHadoop/004-IntellijPluginHadoop/"/>
    <url>/2017/07/29/IntellijPluginHadoop/004-IntellijPluginHadoop/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本节，将详细说明一下文件系统树UI层的展示设计和实现。文件系统对象以树的方式展示，在IntelliJ 框架内，文件树依附于浮动面板，即IntelliJ 的ToolWindow 插件。UI需要有层次感，IntelliJ  的 ToolWindow 作为文件系统UI的最底层，由IDEA 框架去维护和控制；在ToolWindow上面，需要有个主窗体ToolWindowForm，该窗体上将会呈现文件系统Tree的UI和文件系统对象的相关属性UI；由于可能存在多个连接，连接到HDFS，因此会存在多个文件系统Tree，因此文件系统Tree 的UI将分为两种方式呈现，一种以Tab列表的方式平铺，另一种，以单个树根节点的方式呈现，因此，需要有TabbedBrowsForm  和 SimpleBrowserForm 两种UI，在这两种UI之上，才真正显示出文件系统的Tree控件。因此本节也将从这几个方面来介绍。<br>文件系统树UI整体设计的类图如下：<br><img src="1.png"></p><h2 id="文件系统树FileSystemBrowserTree及其渲染类FileSystemBrowserTreeCellRenderer"><a href="#文件系统树FileSystemBrowserTree及其渲染类FileSystemBrowserTreeCellRenderer" class="headerlink" title="文件系统树FileSystemBrowserTree及其渲染类FileSystemBrowserTreeCellRenderer"></a>文件系统树FileSystemBrowserTree及其渲染类FileSystemBrowserTreeCellRenderer</h2><p>&emsp;&emsp;FileSystemBrowserTree 类为树的控件类，继承了 FileSystemTree 类，FileSystemTree继承了IDEA本身的Tree。FileSystemBrowserTree 类定义了对文件系统Tree的相关操作，包括获取TreeModel、进行树节点TreeNode的导航（前一节点、后一节点）、树节点TreeNode的折叠和展开、鼠标悬停TreeNode的提示文字、获取选中的TreeNode、TreeNode选中的事件通知、TreeNode的鼠标事件、TreeNode的键盘事件等。下面就Tree的初始化和右键菜单做详细说明。</p><h3 id="FileSystemBrowserTree的初始化方法"><a href="#FileSystemBrowserTree的初始化方法" class="headerlink" title="FileSystemBrowserTree的初始化方法"></a>FileSystemBrowserTree的初始化方法</h3><p>&emsp;&emsp;初始化中包括鼠标、键盘、选择事件的注册、设置根节点的可见性、设置Tree的相关滚动条、设置Tree渲染方式，初始化代码如下：  </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化树控件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> treeModel</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileSystemBrowserTree</span><span class="hljs-params">(BrowserTreeModel treeModel)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">super</span>(treeModel);<br>    <span class="hljs-comment">//注册监听事件</span><br>    addKeyListener(<span class="hljs-keyword">this</span>.keyListener);<br>    addMouseListener(<span class="hljs-keyword">this</span>.mouseListener);<br>    addTreeSelectionListener(<span class="hljs-keyword">this</span>.treeSelectionListener);<br>    setToggleClickCount(<span class="hljs-number">0</span>);<br>    setRootVisible(treeModel <span class="hljs-keyword">instanceof</span> TabbedBrowserTreeModel);<br>    setShowsRootHandles(<span class="hljs-keyword">true</span>);<br>    setAutoscrolls(<span class="hljs-keyword">true</span>);<br>    <span class="hljs-comment">//设置TreeNode的渲染器</span><br>    FileSystemBrowserTreeCellRenderer browserTreeCellRenderer = <span class="hljs-keyword">new</span> FileSystemBrowserTreeCellRenderer(treeModel.getProject());<br>    setCellRenderer(browserTreeCellRenderer);<br>    FileSystemBrowserTreeSpeedSearch speedSearch = <span class="hljs-keyword">new</span> FileSystemBrowserTreeSpeedSearch(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-comment">//注册相关需要释放的资源对象</span><br>    Disposer.register(<span class="hljs-keyword">this</span>, speedSearch);<br>    Disposer.register(<span class="hljs-keyword">this</span>, treeModel);<br>    Disposer.register(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.navigationHistory);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="TreeNode的右键菜单设计"><a href="#TreeNode的右键菜单设计" class="headerlink" title="TreeNode的右键菜单设计"></a>TreeNode的右键菜单设计</h3><p>&emsp;&emsp;当选中树的某个节点，根据其节点类型，显示不同的右键菜单项。目前节点只有两种类型，一是文件系统对象的集合类型，即FIleSystemObjectBundle，该类型特指整个HDFS根目录下(“/“)的所有对象(包括目录和文件)；二是文件系统的对象，目录或者文件，这里为简单起见，文件不区分具体的类型。每种类型显示哪些右键菜单，在本节后面介绍。右键菜单展示，需要在TreeNode的鼠标选中节点右键释放后处理。在处理过程中使用了多线程操作。定义内部类MouseListener 封装了 整个鼠标事件处理，其中方法 mouseReleased(final MouseEvent event)  实现了右键菜单的展示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     *鼠标释放事件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> event</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mouseReleased</span><span class="hljs-params">(<span class="hljs-keyword">final</span> MouseEvent event)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (event.getButton() == <span class="hljs-number">3</span>)<br>        &#123;<br>            TreePath path = FileSystemBrowserTree.<span class="hljs-keyword">this</span>.getPathForLocation(event.getX(), event.getY());<br>            <span class="hljs-keyword">if</span> (path != <span class="hljs-keyword">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">final</span> FileSystemBrowserTreeNode lastPathEntity = (FileSystemBrowserTreeNode) path.getLastPathComponent();<br>                <span class="hljs-keyword">if</span> (lastPathEntity.isDisposed())<br>                &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-comment">//开启一个右键菜单判断操作线程</span><br>                <span class="hljs-keyword">new</span> ModalTask(lastPathEntity.getProject(), <span class="hljs-string">&quot;Loading fsobject information&quot;</span>, <span class="hljs-keyword">true</span>)<br>                &#123;<br>                    <span class="hljs-comment">//进行TreeNode的类型判断，并实例化菜单的Action</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> ProgressIndicator progressIndicator)</span></span><br><span class="hljs-function">                    </span>&#123;<br>                        ActionGroup actionGroup = <span class="hljs-keyword">null</span>;<br>                        <span class="hljs-keyword">if</span> ((lastPathEntity <span class="hljs-keyword">instanceof</span> FileSystemObject))<br>                        &#123;<br>                            <span class="hljs-comment">//文件系统对象节点，右键菜单</span><br>                            FileSystemObject object = (FileSystemObject) lastPathEntity;<br>                            actionGroup = <span class="hljs-keyword">new</span> ObjectActionGroup(object);<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((lastPathEntity <span class="hljs-keyword">instanceof</span> FileSystemObjectBundle))<br>                        &#123;<br>                            <span class="hljs-comment">//文件系统对象集合节点</span><br>                            FileSystemObjectBundle objectsBundle = (FileSystemObjectBundle) lastPathEntity;<br>                            ConnectionHandler connectionHandler = objectsBundle.getConnectionHandler();<br>                            actionGroup = <span class="hljs-keyword">new</span> ConnectionActionGroup(connectionHandler);<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> ((actionGroup != <span class="hljs-keyword">null</span>) &amp;&amp; (!progressIndicator.isCanceled()))<br>                        &#123;<br>                            <span class="hljs-comment">//开启显示右键菜单操作线程</span><br>                            ActionPopupMenu actionPopupMenu = ActionManager.getInstance().createActionPopupMenu(<span class="hljs-string">&quot;&quot;</span>, actionGroup);<br>                            popupMenu = actionPopupMenu.getComponent();<br>                            <span class="hljs-keyword">new</span> SimpleLaterInvocator()<br>                            &#123;<br>                                <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span><br><span class="hljs-function">                                </span>&#123;<br>                                    <span class="hljs-keyword">if</span> (FileSystemBrowserTree.<span class="hljs-keyword">this</span>.isShowing())<br>                                    &#123;<br>                                        popupMenu.show(FileSystemBrowserTree.<span class="hljs-keyword">this</span>,event.getX(),event.getY());<br>                                    &#125;<br>                                &#125;<br>                            &#125;.start();<br>                        &#125; <span class="hljs-keyword">else</span><br>                        &#123;<br>                            FileSystemBrowserTree.<span class="hljs-keyword">this</span>.popupMenu = <span class="hljs-keyword">null</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;.start();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="TreeNode的渲染器类-FileSystemBrowserTreeCellRenderer"><a href="#TreeNode的渲染器类-FileSystemBrowserTreeCellRenderer" class="headerlink" title="TreeNode的渲染器类 FileSystemBrowserTreeCellRenderer"></a>TreeNode的渲染器类 FileSystemBrowserTreeCellRenderer</h3><p>&emsp;&emsp;如果要改变TreeNode的显示方式要使用到TreeCellRender，通过对它的实现才能够得到不同显示方式的Tree。这里自定义继承 TreeCellRender 类，实现了TreeNode 节点的图标显示、文字显示等。在FileSystemBrowserTreeCellRenderer 类中重写了 Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) 方法。该方法返回一个Component这个控件，也就是你要设置的树中节点的显示风格，当然在实现的时候你可以继承一个Jcomponent类的子类，也可以在类中设置一个私有变量然后返回。<br>&emsp;&emsp;在这个方法中有很多参数，首先是Jtree 这个就是你要设置的树，对应的对象，然后是value ，这个其实是节点，通过他你可以获得节点的数据，以及对应的子节点父节点等。接着是selected表示如果被选中时该如何显示。Expanded则表示如果出于扩展状态如何显示节点，然后是leaf，叶子节点的显示方式可以通过这个条件设置；row这个参数，如果有伸缩的话，row是随时改变的，最后一个hasFocus是是否拥有焦点，设置拥有焦点时的显示方式。实现了这个方法后，用setCellRende()方法设置一下这个类的实例就行了。详细可参见该类的代码…./src/main/java/com/fangyuzhong/intelliJ/hadoop/fsbrowser/ui/FileSystemBrowserTreeCellRenderer.java</p><h2 id="文件系统主窗体设计"><a href="#文件系统主窗体设计" class="headerlink" title="文件系统主窗体设计"></a>文件系统主窗体设计</h2><p>&emsp;&emsp;文件系统主窗体UI设计分为三个部分，一个是ToolWindow 上呈现的UI：BrowserToolWindowForm，该窗体为容器，这个窗体上，将构建Tree的显示UI和文件系统对象的属性显示UI；第二个是 展现Tree的UI窗体TabbedBrowserForm和SimpleBrowserForm；第三部分是文件对象属性展示UI：ObjectPropertiesForm。三部分都是UI界面，IDEA开发UI界面使用 GUI Form的开发方式。主界面UI采用XML来描述，类的文件名后面加”.form”构成，UI界面可以使用控件进行拖拽，UI背后的业务逻辑 使用和该类同名的java 文件描述。IDEA这么做，无非就是想摆脱繁琐的Swing代码，微软的WPF技术也是同样使用这种方法。</p><h3 id="展现Tree的UI窗体TabbedBrowserForm和SimpleBrowserForm"><a href="#展现Tree的UI窗体TabbedBrowserForm和SimpleBrowserForm" class="headerlink" title="展现Tree的UI窗体TabbedBrowserForm和SimpleBrowserForm"></a>展现Tree的UI窗体TabbedBrowserForm和SimpleBrowserForm</h3><p>&emsp;&emsp;当用户选择以Tab列表的方式展现多个HDFS连接，那么使用TabbedBrowserForm来展示，当用户选择以单个树控件多个根节点方式展现多个HDFS连接，那么使用SimpleBrowserForm方式来展示,TabbedBrowserForm展示方法借助于SimpleBrowserForm，两个窗体都继承抽象FileSystemBrowserFrom。<br>&emsp;&emsp;抽象类FileSystemBrowserFrom 继承了项目中自定义的窗体基类。在FileSystemBrowserFrom 中有三个重要的抽象方法：<br>①、public abstract FileSystemBrowserTree getBrowserTree()  :获取文件系统树Tree控件对象<br>②、public abstract void selectElement(FileSystemBrowserTreeNode paramBrowserTreeNode, boolean paramBoolean1, boolean paramBoolean2);   设置选中的Tree的元素<br>③、public abstract void rebuildTree();  构建Tree控件<br>三个抽象方法均在TabbedBrowserForm和SimpleBrowserForm 中具体实现。</p><h4 id="SimpleBrowserForm类"><a href="#SimpleBrowserForm类" class="headerlink" title="SimpleBrowserForm类"></a>SimpleBrowserForm类</h4><p>&emsp;&emsp;该类比较简单，在UI上，有个主面板Jpanel ，放置FileSystemBrowserTree控件，这是UI最基础的部分，Tree控件始终是在这个UI上的，TabbedBrowserForm也是借助该窗体进行展示，只不过会根据HDFS连接个数 new 这个窗体，放到Tab页上而已。使用SimpleBrowserTreeModel实例化一个FileSystemBrowserTree控件，初始化代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用SimpleBrowserTreeModel，初始化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parentComponent</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SimpleBrowserForm</span><span class="hljs-params">(DisposableProjectComponent parentComponent)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>(parentComponent, <span class="hljs-keyword">new</span> SimpleBrowserTreeModel(parentComponent.getProject(), ConnectionManager.getInstance(parentComponent.getProject()).getConnectionBundle()));<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TabbedBrowserTreeModel，初始化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parentComponent</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> connectionHandler</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SimpleBrowserForm</span><span class="hljs-params">(DisposableProjectComponent parentComponent, ConnectionHandler connectionHandler)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>(parentComponent, <span class="hljs-keyword">new</span> TabbedBrowserTreeModel(connectionHandler));<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *初始化，使用BrowserTreeModel 创建文件树控件对象FileSystemBrowserTree</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parentComponent</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> treeModel</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SimpleBrowserForm</span><span class="hljs-params">(DisposableProjectComponent parentComponent, BrowserTreeModel treeModel)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">super</span>(parentComponent);<br>    <span class="hljs-keyword">this</span>.browserTree = <span class="hljs-keyword">new</span> FileSystemBrowserTree(treeModel);<br>    <span class="hljs-keyword">this</span>.browserScrollPane.setViewportView(<span class="hljs-keyword">this</span>.browserTree);<br>    <span class="hljs-keyword">this</span>.browserScrollPane.setBorder(<span class="hljs-keyword">new</span> EmptyBorder(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>    ToolTipManager.sharedInstance().registerComponent(<span class="hljs-keyword">this</span>.browserTree);<br>    Disposer.register(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.browserTree);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>重写了抽象类的3个抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取FileSystemBrowserTree对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FileSystemBrowserTree <span class="hljs-title">getBrowserTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.browserTree;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置选中树元素</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectElement</span><span class="hljs-params">(FileSystemBrowserTreeNode treeNode, <span class="hljs-keyword">boolean</span> focus, <span class="hljs-keyword">boolean</span> scroll)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>.browserTree.selectElement(treeNode, focus);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 构建Tree</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rebuildTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>.browserTree.getModel().getRoot().rebuildTreeChildren();<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="TabbedBrowserForm类"><a href="#TabbedBrowserForm类" class="headerlink" title="TabbedBrowserForm类"></a>TabbedBrowserForm类</h4><p>&emsp;&emsp;该类，将用户创建的多个HDFS连接，以Tab页(列表)的方式呈现。因此界面UI有两个控件，一个是主面板mainPanel,一个是自定义开发 tab 控件 TabbedPane 。  </p><h5 id="该类的初始化。"><a href="#该类的初始化。" class="headerlink" title="该类的初始化。"></a>该类的初始化。</h5><p>&emsp;&emsp;首先创建一个TabbedPane 控件，注册相关事件监听器；然后调用initTabs()方法根据连接数创建各个连接的Tab页。initTabs()方法中，通过HDFS连接管理类，获取当前HDFS连接集合，然后遍历连接集合，读取每个连接，创建一个Tab页面，并且实例化一个SimpleBrowserForm窗体，放到tab页面上；最后，将TabbedPane 加入到主面板中，完成整个UI的构建。初始化代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parentComponent</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TabbedBrowserForm</span><span class="hljs-params">(BrowserToolWindowForm parentComponent)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">super</span>(parentComponent);<br>    <span class="hljs-keyword">this</span>.connectionTabs = <span class="hljs-keyword">new</span> TabbedPane(<span class="hljs-keyword">this</span>);<br>    initTabs();<br>    <span class="hljs-keyword">this</span>.connectionTabs.addListener(<span class="hljs-keyword">new</span> TabsListener() &#123;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectionChanged</span><span class="hljs-params">(TabInfo oldSelection, TabInfo newSelection)</span></span>&#123;&#125;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeSelectionChanged</span><span class="hljs-params">(TabInfo oldSelection, TabInfo newSelection)</span></span>&#123;&#125;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tabRemoved</span><span class="hljs-params">(TabInfo tabInfo)</span> </span>&#123;&#125;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tabsMoved</span><span class="hljs-params">()</span></span>&#123;&#125;&#125;);<br>    Disposer.register(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.connectionTabs);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化Tab 列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initTabs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Project project = getProject();<br>    TabbedPane oldConnectionTabs = <span class="hljs-keyword">this</span>.connectionTabs;<br>    <span class="hljs-keyword">this</span>.connectionTabs = <span class="hljs-keyword">new</span> TabbedPane(<span class="hljs-keyword">this</span>);<br>    ConnectionManager connectionManager = ConnectionManager.getInstance(project);<br>    <span class="hljs-comment">//获取HDFS连接集合，遍历连接集合，读取每个连接，创建一个Tab页面</span><br>    ConnectionBundle connectionBundle = connectionManager.getConnectionBundle();<br>    <span class="hljs-keyword">for</span> (ConnectionHandler connectionHandler : connectionBundle.getConnectionHandlers())<br>    &#123;<br>        <span class="hljs-comment">//根据每个连接，实例化一个 SimpleBrowserForm，放到一个新的Tab页上</span><br>        SimpleBrowserForm browserForm = <span class="hljs-keyword">new</span> SimpleBrowserForm(<span class="hljs-keyword">this</span>, connectionHandler);<br>        JComponent component = browserForm.getComponent();<br>        TabInfo tabInfo = <span class="hljs-keyword">new</span> TabInfo(component);<br>        tabInfo.setText(CommonUtil.nvl(connectionHandler.getName(), <span class="hljs-string">&quot;[unnamed fsconnection]&quot;</span>));<br>        tabInfo.setObject(browserForm);<br>        <span class="hljs-keyword">this</span>.connectionTabs.addTab(tabInfo);<br>    &#125;<br>    <span class="hljs-comment">//添加connectiontab 到主面板控件mainPanel</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.connectionTabs.getTabCount() == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">this</span>.mainPanel.removeAll();<br>        <span class="hljs-keyword">this</span>.mainPanel.add(<span class="hljs-keyword">new</span> JBList(<span class="hljs-keyword">new</span> ArrayList()), <span class="hljs-string">&quot;Center&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.mainPanel.getComponentCount() &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        Component component = <span class="hljs-keyword">this</span>.mainPanel.getComponent(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (component != <span class="hljs-keyword">this</span>.connectionTabs)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.mainPanel.removeAll();<br>            <span class="hljs-keyword">this</span>.mainPanel.add(<span class="hljs-keyword">this</span>.connectionTabs, <span class="hljs-string">&quot;Center&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.mainPanel.add(<span class="hljs-keyword">this</span>.connectionTabs, <span class="hljs-string">&quot;Center&quot;</span>);<br>    &#125;<br>    DisposerUtil.dispose(oldConnectionTabs);<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="重写基类的抽象方法"><a href="#重写基类的抽象方法" class="headerlink" title="重写基类的抽象方法"></a>重写基类的抽象方法</h5><p>&emsp;&emsp;由于是以Tab列表的方式展现Tree，在任何时候，只有一个Tab页是激活的，因此，在获取FileSystemBrowserTree对象，有两种方法，一是获取当前激活的Tab上的Tree，二是，获取指定HDFS连接所在的Tree。选中树元素和构建树，就可以调用SimpleBrowserForm 的相关方法了。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取当前活动的Tree</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FileSystemBrowserTree <span class="hljs-title">getBrowserTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> getActiveBrowserTree();<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取指定连接的Tree</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> connectionHandler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FileSystemBrowserTree <span class="hljs-title">getBrowserTree</span><span class="hljs-params">(ConnectionHandler connectionHandler)</span></span><br><span class="hljs-function"></span>&#123;<br>    SimpleBrowserForm browserForm = getBrowserForm(connectionHandler);<br>    <span class="hljs-keyword">return</span> browserForm == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : browserForm.getBrowserTree();<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取当前激活的Tree</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FileSystemBrowserTree <span class="hljs-title">getActiveBrowserTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    TabInfo tabInfo = <span class="hljs-keyword">this</span>.connectionTabs.getSelectedInfo();<br>    <span class="hljs-keyword">if</span> (tabInfo != <span class="hljs-keyword">null</span>)<br>    &#123;<br>        SimpleBrowserForm browserForm = (SimpleBrowserForm) tabInfo.getObject();<br>        <span class="hljs-keyword">return</span> browserForm.getBrowserTree();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置选中元素</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> treeNode</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> focus</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> scroll</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectElement</span><span class="hljs-params">(FileSystemBrowserTreeNode treeNode, <span class="hljs-keyword">boolean</span> focus, <span class="hljs-keyword">boolean</span> scroll)</span></span><br><span class="hljs-function"></span>&#123;<br>    ConnectionHandler connectionHandler = treeNode.getConnectionHandler();<br>    SimpleBrowserForm browserForm = getBrowserForm(connectionHandler);<br>    <span class="hljs-keyword">if</span> (browserForm != <span class="hljs-keyword">null</span>)<br>    &#123;<br>        <span class="hljs-keyword">this</span>.connectionTabs.select(browserForm.getComponent(), focus);<br>        <span class="hljs-keyword">if</span> (scroll)<br>        &#123;<br>            browserForm.selectElement(treeNode, focus, scroll);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 构建树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rebuildTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (TabInfo tabInfo : <span class="hljs-keyword">this</span>.connectionTabs.getTabs())<br>    &#123;<br>        SimpleBrowserForm browserForm = (SimpleBrowserForm) tabInfo.getObject();<br>        browserForm.rebuildTree();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="主窗体UI，BrowserToolWindowForm。"><a href="#主窗体UI，BrowserToolWindowForm。" class="headerlink" title="主窗体UI，BrowserToolWindowForm。"></a>主窗体UI，BrowserToolWindowForm。</h3><p>&emsp;&emsp; 该类，将Tree的UI和文件系统对象属性UI及其工具栏的Action组合起来。界面UI上，有个主面板 mainPanel、存放FileSystemBrowserForm面板 browserPanel、存放ObjectProperties的面板 objectPropertiesPanel。在初始化中，先注册显示方式设置的监听，然后调用 rebuild()方法，构建Tree 的UI组件；最后添加工具栏的Action，初始化代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BrowserToolWindowForm</span><span class="hljs-params">(Project project)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">super</span>(project);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    注册显示方式设置监听</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">this</span>.displayModeSettingsListener = <span class="hljs-keyword">new</span> DisplayModeSettingsListener()<br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayModeChanged</span><span class="hljs-params">(BrowserDisplayMode displayMode)</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">if</span> (BrowserToolWindowForm.<span class="hljs-keyword">this</span>.getDisplayMode() != displayMode)<br>            &#123;<br>                BrowserToolWindowForm.<span class="hljs-keyword">this</span>.setDisplayMode(displayMode);<br>                BrowserToolWindowForm.<span class="hljs-keyword">this</span>.rebuild();<br>            &#125;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">//构建UI</span><br>    rebuild();<br>    <span class="hljs-comment">//添加工具栏</span><br>    ActionToolbar actionToolbar = ActionUtil.createActionToolbar(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">true</span>,<br>            <span class="hljs-string">&quot;HadoopNavigator.ActionGroup.Browser.Controls&quot;</span>);<br>    actionToolbar.setTargetComponent(<span class="hljs-keyword">this</span>.actionsPanel);<br>    <span class="hljs-keyword">this</span>.actionsPanel.add(actionToolbar.getComponent());<br>    <span class="hljs-comment">//添加文件对象属性显示UI</span><br>    <span class="hljs-keyword">this</span>.objectPropertiesPanel.setVisible(<span class="hljs-keyword">true</span>);<br>    <span class="hljs-keyword">this</span>.objectPropertiesForm = <span class="hljs-keyword">new</span> ObjectPropertiesForm(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">this</span>.objectPropertiesPanel.add(<span class="hljs-keyword">this</span>.objectPropertiesForm.getComponent());<br>    GuiUtils.replaceJSplitPaneWithIDEASplitter(<span class="hljs-keyword">this</span>.mainPanel);<br>    GUIUtil.updateSplitterProportion(<span class="hljs-keyword">this</span>.mainPanel, <span class="hljs-number">0.7F</span>);<br>    <span class="hljs-comment">//通知显示方式设置修改</span><br>    EventUtil.subscribe(project, <span class="hljs-keyword">this</span>, DisplayModeSettingsListener.TOPIC, <span class="hljs-keyword">this</span>.displayModeSettingsListener);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 构建界面UI</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rebuild</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//获取文件树展示方式</span><br>    <span class="hljs-keyword">this</span>.displayMode = GeneralProjectSettings.getInstance(getProject()).<br>            getBrowserSettings().getBrowserDisplayMode();<br>    <span class="hljs-keyword">this</span>.browserPanel.removeAll();<br>    DisposerUtil.dispose(<span class="hljs-keyword">this</span>.browserForm);<br>    <span class="hljs-comment">//按照显示方式，创建Tree显示窗体</span><br>    <span class="hljs-keyword">this</span>.browserForm = (<span class="hljs-keyword">this</span>.displayMode == BrowserDisplayMode.SINGLE ?<br>            <span class="hljs-keyword">new</span> SimpleBrowserForm(<span class="hljs-keyword">this</span>) :<br>            <span class="hljs-keyword">this</span>.displayMode == BrowserDisplayMode.TABBED ?<br>                    <span class="hljs-keyword">new</span> TabbedBrowserForm(<span class="hljs-keyword">this</span>) : <span class="hljs-keyword">null</span>);<br>    <span class="hljs-keyword">this</span>.browserPanel.add(<span class="hljs-keyword">this</span>.browserForm.getComponent(), <span class="hljs-string">&quot;Center&quot;</span>);<br>    <span class="hljs-keyword">this</span>.browserPanel.revalidate();<br>    <span class="hljs-keyword">this</span>.browserPanel.repaint();<br>    Disposer.register(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.browserForm);<br>    <span class="hljs-keyword">if</span> (objectPropertiesForm != <span class="hljs-keyword">null</span>)<br>    &#123;<br>        objectPropertiesForm.cleanObjectPropertiesShow();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="文件属性对象展示窗体ObjectPropertiesForm"><a href="#文件属性对象展示窗体ObjectPropertiesForm" class="headerlink" title="文件属性对象展示窗体ObjectPropertiesForm"></a>文件属性对象展示窗体ObjectPropertiesForm</h3><p>&emsp;&emsp;对于HDFS文件系统对象目录或者文件，显示其所有者、创建日期、文件或者目录大小、文件或者目录的路径、文件或目录备份数  。ObjectPropertiesForm窗体代码在fsobject 包中。到后续讲到FileSystemObject对象的时候再说吧，也比较简单。</p><h3 id="文件系统界面上的工具栏Action。"><a href="#文件系统界面上的工具栏Action。" class="headerlink" title="文件系统界面上的工具栏Action。"></a>文件系统界面上的工具栏Action。</h3><p>&emsp;&emsp;工具栏功能包括，HDFS连接设置、TreeNode导航（前一节点、后一节点）、TreeNode的折叠和展开、隐藏和显示属性对象UI。所有的工具栏功能按钮都是Action插件对象。代码组织如下：<br><img src="2.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;本节，从文件系统树的UI展示上做了说明，介绍了主窗体UI、Tab窗体UI、Simple窗体UI、文件系统对象属性ObjectProperties UI等。这部分主要集中在UI界面开发这块。前面说过，IDEA开发UI界面使用 GUI Form的开发方式，UI对象的布局保存在XML中，那么IDEA框架在运行插件的时候，怎么把UI布局的XML转换为Swing对象？这里需要注意一下：GUI布局文件，采用的是IDEA本身的编译器编译的，在IDEA设置中，找到GUI Designer 项，在Generate GUI into  选中 Java source Code ，如下下图，这样编译后，框架会把UI的XML布局自动生成代码插入到源码文件中：<br><img src="3.png"><br><img src="4.png"></p>]]></content>
    
    
    <categories>
      
      <category>个人作品</category>
      
      <category>IntelliJ Plugin For Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij Plugin</tag>
      
      <tag>Hadoop</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HadoopIntellijPlugin插件HDFS文件系统浏览器设计和实现1</title>
    <link href="/2017/07/28/IntellijPluginHadoop/003-IntellijPluginHadoop/"/>
    <url>/2017/07/28/IntellijPluginHadoop/003-IntellijPluginHadoop/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本节说明文件系统树节点的设计与实现。IntelliJ Plugin for  Hadoop 插件 在开发和设计上，很大程度上借鉴了DB Navigator插件的设计和实现。 DB Navigator  是一款基于 IntelliJ IDEA  数据库管理的优秀插件，该插件目前好像是开源的，地址在<a href="https://plugins.jetbrains.com/plugin/1800-database-navigator">https://plugins.jetbrains.com/plugin/1800-database-navigator</a>  官方插件库，提供的源码不是最新的(源码无法编译)，但可以下载下来进行参考。<br>&emsp;&emsp;文件系统对象，在界面上使用树状结构进行展示，是最好的选择。可以使用 javax.swing.tree 控件进行展示。IDEA 本身也有一套扩展的Tree，也是继承了javax.swing.tree的控件，不过在界面主题上或者节点的事件处理上做了一次封装，因此我们树的主控件，将会继承IDEA的Tree。后续我们再讨论其具体的实现方式。本节我们来讨论一下 树控件节点Node的设计。那么这里涉及到 树节点Node的接口定义、节点模型类设计（Tree 控件使用 TreeModel 类操作相关节点）、节点Node的相关事件监听对象设计、加载数据等待的显示节点设计、树的展示方式设计等。 文件系统树节点的整体设计类图如下：<br><img src="1.png"></p><h2 id="树节点的FileSystemBrowserTreeNode接口定义和其抽象实现"><a href="#树节点的FileSystemBrowserTreeNode接口定义和其抽象实现" class="headerlink" title="树节点的FileSystemBrowserTreeNode接口定义和其抽象实现"></a>树节点的FileSystemBrowserTreeNode接口定义和其抽象实现</h2><p>&emsp;&emsp;FileSystemBrowserTreeNode 继承TreeNode 接口，主要功能包括初始化树的相关元素、获取节点的深度、节点是否可以展开、树节点是否已经加载、构建该节点的子节点、获取该节点的父节点、刷新节点、获取节点图标、获取节点文本(展示使用)等等。另外节点可以进行导航设置(跟踪节点浏览的位置)，因此需要继承 NavigationItem, ItemPresentation  接口实现导航功能。鼠标悬停，会进行节点内容的相关提示，因此还要继承 自定义 工具提示 接口 ToolTipProvider。代码如下：<br> <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义HDFS目录树节点接口&lt;p&gt;</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-15.</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FileSystemBrowserTreeNode</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">TreeNode</span>, <span class="hljs-title">NavigationItem</span>, <span class="hljs-title">ItemPresentation</span>, <span class="hljs-title">ToolTipProvider</span>,<span class="hljs-title">GenericFileSystemElement</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化树的元素</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initTreeElement</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否展开</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">canExpand</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取树的深度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getTreeDepth</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 树结构是否加载</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isTreeStructureLoaded</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 或节点的子节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     List&lt;? extends FileSystemBrowserTreeNode&gt; getChildren();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 刷新子节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">refreshTreeChildren</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 重构该节点的子节点</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rebuildTreeChildren</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取节点图标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramInt</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function">Icon <span class="hljs-title">getIcon</span><span class="hljs-params">(<span class="hljs-keyword">int</span> paramInt)</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *获取节点文本</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function">String <span class="hljs-title">getPresentableText</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取节点文本详细信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function">String <span class="hljs-title">getPresentableTextDetails</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function">String <span class="hljs-title">getPresentableTextConditionalDetails</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取子节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramInt</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function">FileSystemBrowserTreeNode <span class="hljs-title">getChildAt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> paramInt)</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取父节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function">FileSystemBrowserTreeNode <span class="hljs-title">getParent</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取节点所在的索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramBrowserTreeNode</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getIndex</span><span class="hljs-params">(FileSystemBrowserTreeNode paramBrowserTreeNode)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></p><p>&emsp;&emsp;该接口，有个抽象的实现，在其抽象实现中，有个重要的方法 getLocationString(),该方法表示节点所在的路径字符串，在具体的节点实现类中需要重写该方法。抽象类 FileSystemBrowserTreeNodeBase 代码如下：<br> <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-15.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileSystemBrowserTreeNodeBase</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DisposableBase</span></span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">FileSystemBrowserTreeNode</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取当前位置字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getLocationString</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取子对象枚举</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Enumeration <span class="hljs-title">children</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> Collections.enumeration(getChildren());<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取子节点所在的索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> child</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getIndex</span><span class="hljs-params">(TreeNode child)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> getIndex((FileSystemBrowserTreeNode) child);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">getAllowsChildren</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> !isLeaf();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></p><h2 id="树节点Node的事件监听接口的设计和实现"><a href="#树节点Node的事件监听接口的设计和实现" class="headerlink" title="树节点Node的事件监听接口的设计和实现"></a>树节点Node的事件监听接口的设计和实现</h2><p>&emsp;&emsp;树节点Node 事件监听器BrowserTreeEventListener接口，定义了Node 改变、选中改变触发的相关方法，继承了 EventListener 接口。IDEA 框架本身定义了一套事件或者消息通知机制，因此借助IDEA来实现事件消息通知。代码如下：<br> <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-16.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span>  <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BrowserTreeEventListener</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">EventListener</span></span><br><span class="hljs-class"></span>&#123;<br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 通知消息类型</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-keyword">final</span> Topic&lt;BrowserTreeEventListener&gt; TOPIC = Topic.create(<span class="hljs-string">&quot;Browser tree event&quot;</span>, BrowserTreeEventListener.class);<br><br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 树节点Node改变事件触发的方法</span><br><span class="hljs-comment">       * <span class="hljs-doctag">@param</span> paramBrowserTreeNode Node接口</span><br><span class="hljs-comment">       * <span class="hljs-doctag">@param</span> paramTreeEventType 事件类型枚举</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">nodeChanged</span><span class="hljs-params">(FileSystemBrowserTreeNode paramBrowserTreeNode, TreeEventType paramTreeEventType)</span></span>;<br><br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 树节点Node选中改变事件触发的方法</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selectionChanged</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><br>BrowserTreeEventAdapter  类为其事件监听处理的抽象实现，代码如下：<br> <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-16.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrowserTreeEventAdapter</span></span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">BrowserTreeEventListener</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">nodeChanged</span><span class="hljs-params">(FileSystemBrowserTreeNode node, TreeEventType eventType)</span></span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectionChanged</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></p><h2 id="读取文件系统对象后，在Tree上进行展示"><a href="#读取文件系统对象后，在Tree上进行展示" class="headerlink" title="读取文件系统对象后，在Tree上进行展示"></a>读取文件系统对象后，在Tree上进行展示</h2><p>&emsp;&emsp;读取文件系统对象后，在Tree上进行展示或者在读取文件系统对象过程中，数据量多的时候，需要显示正在加载的这样一个树节点，以确保良好的用户体验。IDEA本身在工程加载的时候，也有这样的特点。因此要实现一个正在等待加载的节点，实现 FIleSystemBrowTreeNode 接口即可，比较简单，这里就不再贴代码了。</p><h2 id="树节点Node-的模型抽象类及其具体实现的设计和实现"><a href="#树节点Node-的模型抽象类及其具体实现的设计和实现" class="headerlink" title="树节点Node 的模型抽象类及其具体实现的设计和实现"></a>树节点Node 的模型抽象类及其具体实现的设计和实现</h2><p>&emsp;&emsp;Tree的控件，不支持直接操作Node，需要使用TreeModel 来操作节点。由于可能存在多个连接，连接到HDFS，因此会存在多个文件系统Tree，如何展示，是以Tab列表的方式还是以单个Tree的方式展示，用户是可选择的。因此需要实现两个TreeModel。如果用户使用Tab列表展示，那就使用 TabbedBrowserTreeModel 进行操作，如果选择单个Tree进行展示，那就使用SimpleBrowserTreeModel进行操作，因此需要对TreeModel进行抽象设计。  </p><h3 id="抽象类BrowserTreeModel-实现了TreeModel接口。"><a href="#抽象类BrowserTreeModel-实现了TreeModel接口。" class="headerlink" title="抽象类BrowserTreeModel 实现了TreeModel接口。"></a>抽象类BrowserTreeModel 实现了TreeModel接口。</h3><p>&emsp;&emsp;抽象类BrowserTreeModel 实现了TreeModel接口，该类中处理以下几个方面：<br>&emsp;&emsp;①、注册通知BrowserTreeEventListener事件，一当接收到需要更新Node，触发通知进行Node的更新操作<br>&emsp;&emsp;②、注册(显示)等待加载的Node对象。多线程进行操作<br>&emsp;&emsp;③、实现TreeModel接口必须实现的方法<br>&emsp;&emsp;代码如下：<br> <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义树节点模型TreeModel抽象类</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-16.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrowserTreeModel</span></span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">TreeModel</span>, <span class="hljs-title">Disposable</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> Set&lt;TreeModelListener&gt; treeModelListeners = <span class="hljs-keyword">new</span> HashSet();<br>    <span class="hljs-keyword">private</span> FileSystemBrowserTreeNode root;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> isDisposed = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;LoadInProgressTreeNode&gt; loadInProgressNodes = <span class="hljs-keyword">new</span> THashSet();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化 树节点模型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">BrowserTreeModel</span><span class="hljs-params">(FileSystemBrowserTreeNode root)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = root;<br>        EventUtil.subscribe(root.getProject(), <span class="hljs-keyword">this</span>, BrowserTreeEventListener.TOPIC, <span class="hljs-keyword">this</span>.browserTreeEventListener);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册 Node 模型监听事件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> listener</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addTreeModelListener</span><span class="hljs-params">(TreeModelListener listener)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>.treeModelListeners.add(listener);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除Node模型监听事件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> listener</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeTreeModelListener</span><span class="hljs-params">(TreeModelListener listener)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>.treeModelListeners.remove(listener);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通知节点修改了，需要处理相关事件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> treeNode 树节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> eventType 事件类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyListeners</span><span class="hljs-params">(FileSystemBrowserTreeNode treeNode, TreeEventType eventType)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> ((FailsafeUtil.softCheck(<span class="hljs-keyword">this</span>)) &amp;&amp; (FailsafeUtil.softCheck(treeNode)))<br>        &#123;<br>            TreePath treePath = FileSystemBrowserUtils.createTreePath(treeNode);<br>            <span class="hljs-comment">//通知节点修改，按照事件类型，重新处理</span><br>            TreeUtil.notifyTreeModelListeners(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.treeModelListeners, treePath, eventType);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取当前的Project</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Project <span class="hljs-title">getProject</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> getRoot().getProject();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查是否包含指定的Node</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramBrowserTreeNode</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(FileSystemBrowserTreeNode paramBrowserTreeNode)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册加载显示节点（使用定时器多线程加载）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerLoadInProgressNode</span><span class="hljs-params">(LoadInProgressTreeNode node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.loadInProgressNodes)<br>        &#123;<br>            <span class="hljs-keyword">boolean</span> startTimer = <span class="hljs-keyword">this</span>.loadInProgressNodes.size() == <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.loadInProgressNodes.add(node);<br>            <span class="hljs-keyword">if</span> (startTimer)<br>            &#123;<br>                Timer reloader = <span class="hljs-keyword">new</span> Timer(<span class="hljs-string">&quot;Hadoop Browser (load in progress reload timer)&quot;</span>);<br>                reloader.schedule(<span class="hljs-keyword">new</span> LoadInProgressRefreshTask(), <span class="hljs-number">0L</span>, <span class="hljs-number">50L</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载等待显示节点的线程类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoadInProgressRefreshTask</span></span><br><span class="hljs-class">            <span class="hljs-keyword">extends</span> <span class="hljs-title">TimerTask</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">int</span> iterations = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LoadInProgressRefreshTask</span><span class="hljs-params">()</span></span><br><span class="hljs-function">        </span>&#123;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">synchronized</span> (loadInProgressNodes)<br>            &#123;<br>                Iterator&lt;LoadInProgressTreeNode&gt; loadInProgressNodesIterator =loadInProgressNodes.iterator();<br>                <span class="hljs-keyword">while</span> (loadInProgressNodesIterator.hasNext())<br>                &#123;<br>                    LoadInProgressTreeNode loadInProgressTreeNode = loadInProgressNodesIterator.next();<br>                    <span class="hljs-keyword">try</span><br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (loadInProgressTreeNode.isDisposed())<br>                        &#123;<br>                            loadInProgressNodesIterator.remove();<br>                        &#125; <span class="hljs-keyword">else</span><br>                        &#123;<br>                           notifyListeners(loadInProgressTreeNode, TreeEventType.NODES_CHANGED);<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (ProcessCanceledException e)<br>                    &#123;<br>                        loadInProgressNodesIterator.remove();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (loadInProgressNodes.isEmpty())<br>                &#123;<br>                    cancel();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">this</span>.iterations += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取根节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FileSystemBrowserTreeNode <span class="hljs-title">getRoot</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span>  FailsafeUtil.get(<span class="hljs-keyword">this</span>.root);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取父节点的子节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parent</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getChild</span><span class="hljs-params">(Object parent, <span class="hljs-keyword">int</span> index)</span></span><br><span class="hljs-function">    </span>&#123;<br>        FileSystemBrowserTreeNode treeChild = ((FileSystemBrowserTreeNode) parent).getChildAt(index);<br>        <span class="hljs-keyword">if</span> ((treeChild <span class="hljs-keyword">instanceof</span> LoadInProgressTreeNode))<br>        &#123;<br>            registerLoadInProgressNode((LoadInProgressTreeNode) treeChild);<br>        &#125;<br>        <span class="hljs-keyword">return</span> treeChild;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取父节点的子节点的数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parent</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getChildCount</span><span class="hljs-params">(Object parent)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> ((FileSystemBrowserTreeNode) parent).getChildCount();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断节点是否是叶子节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isLeaf</span><span class="hljs-params">(Object node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> ((FileSystemBrowserTreeNode) node).isLeaf();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取子节点所在的索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parent</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> child</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getIndexOfChild</span><span class="hljs-params">(Object parent, Object child)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> ((FileSystemBrowserTreeNode) parent).getIndex((FileSystemBrowserTreeNode) child);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">valueForPathChanged</span><span class="hljs-params">(TreePath path, Object newValue)</span></span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dispose</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.isDisposed)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.isDisposed = <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">this</span>.treeModelListeners.clear();<br>            <span class="hljs-keyword">this</span>.loadInProgressNodes.clear();<br>            <span class="hljs-keyword">this</span>.root = <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 树节点事件监听处理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> BrowserTreeEventListener browserTreeEventListener = <span class="hljs-keyword">new</span> BrowserTreeEventAdapter()<br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">nodeChanged</span><span class="hljs-params">(FileSystemBrowserTreeNode node, TreeEventType eventType)</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">if</span> (contains(node))<br>            &#123;<br>               notifyListeners(node, eventType);<br>            &#125;<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure></p><h3 id="TreeModel的具体实现"><a href="#TreeModel的具体实现" class="headerlink" title="TreeModel的具体实现"></a>TreeModel的具体实现</h3><p>&emsp;&emsp;说完了TreeModel的抽象类，下面说说TreeModel的具体实现。TreeModel的具体实现有两种，TabbedBrowserTreeModel 和 SimpleBrowserTreeModel。当用户选择文件系统树以Tab列表的方式展示时，树的Node操作使用的是 TabbedBrowserTreeModel，当用户选择以单个树展示时，树的Node操作使用SimpleBrowserTreeModel。<br>TabbedBrowserTreeModel 类，继承抽象类BrowserTreeModel。构造函数中使用 文件系统连接对象ConnectionHandler 作为参数，代码如下：<br> <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *文件系统树以Tab列表的方式展示时，树的Node操作使用的是 TabbedBrowserTreeModel</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-16.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TabbedBrowserTreeModel</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">BrowserTreeModel</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化TreeModel</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> connectionHandler 文件系统连接处理接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TabbedBrowserTreeModel</span><span class="hljs-params">(ConnectionHandler connectionHandler)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">super</span>(connectionHandler.getObjectBundle());<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是否包含指定的节点对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node 指定的TreeNode</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(FileSystemBrowserTreeNode node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> getConnectionHandler() == node.getConnectionHandler();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件连接处理对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ConnectionHandler <span class="hljs-title">getConnectionHandler</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> getRoot().getConnectionHandler();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><br>&emsp;&emsp;SimpleBrowserTreeModel ，继承抽象类BrowserTreeModel ，有两个构造函数，一个是无参构造，另一个传入 工程Project对象和文件系统连接集合对象(作为树的根节点)，代码如下：<br> <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义简单的TreeModel的实现</span><br><span class="hljs-comment"> * Created by fangyuzhong on 17-7-16.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleBrowserTreeModel</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">BrowserTreeModel</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SimpleBrowserTreeModel</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>(FailsafeUtil.DUMMY_PROJECT, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> project</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> connectionBundle</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SimpleBrowserTreeModel</span><span class="hljs-params">(Project project, ConnectionBundle connectionBundle)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">super</span>(<span class="hljs-keyword">new</span> SimpleBrowserTreeRoot(project, connectionBundle));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是否包含指定的TreeNode</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(FileSystemBrowserTreeNode node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dispose</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">super</span>.dispose();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;文件系统树节点的设计关系到整个文件系统对象的是如何展示的，定义文件树Tree的TreeNode接口，并实现了等待加载对象的等待节点TreeNode的实现。抽象了TreeNode的操作TreeModel。下节将结合本节的TreeNode和TreeModel ，实现Tree的开发。</p>]]></content>
    
    
    <categories>
      
      <category>个人作品</category>
      
      <category>IntelliJ Plugin For Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij Plugin</tag>
      
      <tag>Hadoop</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HadoopIntellijPlugin整体设计和实现思路</title>
    <link href="/2017/07/26/IntellijPluginHadoop/002-IntellijPluginHadoop/"/>
    <url>/2017/07/26/IntellijPluginHadoop/002-IntellijPluginHadoop/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;上节，把Hadoop-IntelliJ-Plugin 插件项目做了一个简单的介绍，接下来，我将会使用几个篇幅，大致的讲解一下该插件的设计思路和相关的实现。</p><h3 id="Hadoop-IntelliJ-Plugin-插件的需求"><a href="#Hadoop-IntelliJ-Plugin-插件的需求" class="headerlink" title="Hadoop-IntelliJ-Plugin 插件的需求"></a>Hadoop-IntelliJ-Plugin 插件的需求</h3><p>&emsp;&emsp;Hadoop-IntelliJ-Plugin 插件要实现的需求很简单，给定HDFS的访问地址，可以展示出HDFS文件系统相关对象、能够操作HDFS上的对象（创建、删除、下载和上传等）。具体的需求如下：<br>1、能够进行HDFS访问相关信息的配置<br>2、读取HDFS对象，以文件目录树的方式进行展示<br>3、对于目录，可以创建、删除、刷新、重命名和下载<br>4、对于文件，可以删除、下载和查看（目前不区分具体文件类型，查看文件，目前还没有实现<br>5、能够获取目录或者文件的相关属性信息进行展示<br>6、在操作HDFS对象（目录或文件）需要注意当前的权限设置<br>7、支持国际化多语言设置<br>8、方便快捷的使用Intellij 进行MapReduce的相关任务开发和调试（正在设计开发中）<br>Hadoop-Intellij-Plugin 是基于IntelliJ IDEA  开发的插件，因此需要熟悉IntelliJ IDEA的 插件开发。下面就简单介绍一下IDEA的插件开发。</p><h3 id="IntelliJ-IDEA-的插件开发"><a href="#IntelliJ-IDEA-的插件开发" class="headerlink" title="IntelliJ IDEA 的插件开发"></a>IntelliJ IDEA 的插件开发</h3><p>&emsp;&emsp;IntelliJ IDEA  插件开发现在国内的资料比较少，目前最好的参考文档，就是官方SDK开发帮助，但目前也不知道是不是最新。做IDEA开发可以参考一下：<a href="http://www.jetbrains.org/intellij/sdk/docs/welcome.html">http://www.jetbrains.org/intellij/sdk/docs/welcome.html</a><br>这里大致讲解一下，插件开发的需要弄清楚的几个概念，我就不具体详细说明插件开发步骤了。</p><h4 id="IDEA插件组织结构"><a href="#IDEA插件组织结构" class="headerlink" title="IDEA插件组织结构"></a>IDEA插件组织结构</h4><p>&emsp;&emsp;IDEA Plugin  以.zip 结尾的压缩包，安装后，由插件文件内的一个.jar 构成的。该jar 为插件的核心文件，解压后，由 com 文件夹、META-INF 文件夹组成，如果开发的插件还有一些图标或者其他文件，都要存放到该包中。典型的插件目录结构如下：  </p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-string">|-- .IntelliJIdea</span><br>    <span class="hljs-string">|-- config</span><br>        <span class="hljs-string">|-- Plugin</span><br>            <span class="hljs-string">|-- lib</span><br>                <span class="hljs-string">|-- HadoopIntellijPlugin-1.0.jar</span><br>                    <span class="hljs-string">|-- com</span><br>                    <span class="hljs-string">|-- img</span><br>                    <span class="hljs-string">|-- META-INF</span><br>                       <span class="hljs-string">|-- plugin.xml</span><br></code></pre></div></td></tr></table></figure><p>&emsp;&emsp;所有来自插件目录lib下的jar包，会被自动加入ClassPath中。了解该结构很重要，这涉及到后续插件开发完成后，插件安装包的制作。开发的插件，如果涉及到第三方jar包，那么在打安装包时，需要一起将这些依赖加入进去。为了加载各个插件的类文件，IDEA使用一个单独的类加载器。这允许各个插件使用同一类库的不同版本，即使相同的类库被IDEA或另一个插件使用。 默认情况下，IDEA的主要类加载器加载那些插件类加载器找不到的类。然而，在plugin.xml文件中，可以使用depends元素来指定一个插件依赖于另一个或更多其他插件。在这种情况下，那些（被依赖的）插件的类加载器将（优先）用来加载当前插件的类加载器找不到的类。这将允许一个插件引用另一个插件中的类。</p><h4 id="插件相关组件说明"><a href="#插件相关组件说明" class="headerlink" title="插件相关组件说明"></a>插件相关组件说明</h4><p>&emsp;&emsp;在IDEA插件开发中，有3个级别组件：Application Component、Project Component、Module  Component<br>(1)、Application Component  应用程序级 组件，是IDEA启动时，就初始化的组件。可以从Application实例中使用getComponent(Class)方法来获取它们。定义Application 级别的插件，需要实现ApplicationComment 接口。需要实现 initComponent()、disposeComponent() 方法。如果ApplicationComponent组件不依赖与其他的Application组件，那么必须显示声明一个无参构造函数，进行组件的初始化；如果开发的ApplicationComponent依赖与其他的Application组件，应该指定依赖的Application作为构造函数的参数，以确保这些组件按照正确的顺序实例化保证依赖关系。ApplicationComponent组件 实现类，需要在插件配置文件plugin.xml中进行注册，以保证生效。配置文件中以 <code>&lt;application-components&gt; &lt;/application-components&gt;</code>  标记为ApplicationComponent ，后面的插件配置文件再讲。<br>(2)、Project Component IDEA工程Project级别组件，在IDEA加载一个Project的时候初始化。<br>   可以从Project实例中使用getComponent(Class)方法来获取他们。Project 级别的组件，需要实现 ProjectComponent 接口。并在 插件配置文件中使用<code> &lt;project-components&gt;&lt;/project-components&gt;</code> 标记注册。<br>(3)、Module  Component IDEA加载各个Project时为各个Module创建。<br>  ModuleComponent 组件实现类可以选择性的实现ModuleComponent接口。一个module Component 组件的构造器可以包含一个Module类型的参数，如果它需要一个module实例。还可以指定其他application-Component、project-Component或者module-Component组件作为参数。在插件配置文件中使用<code>&lt;module-components&gt;&lt;/module-components&gt;</code>标记注册。<br>  各个级别的组件名称可由getComponentName()方法获取。IDEA 开发的插件也就是这3种类型了。各个插件的组件都需要在插件的配置文件中注册实现类。<br>3、插件组件状态持久化<br>插件组件实现类中，如果实现了 PersistentStateComponent 接口，那么该插件组件的状态会被自动保存和加载。插件的状态会保存到哪个xml配置<br>文件中，可以在 实现类中使用@State和@Storage注解来指定。<br>可参考：<br><a href="http://www.jetbrains.org/intellij/sdk/docs/basics/persisting_state_of_components.html">http://www.jetbrains.org/intellij/sdk/docs/basics/persisting_state_of_components.html</a></p><h4 id="插件组件扩展点"><a href="#插件组件扩展点" class="headerlink" title="插件组件扩展点"></a>插件组件扩展点</h4><p>&emsp;&emsp;如果希望你开发的插件运行其他插件扩展功能，那在你开发的插件中，需要声明一个或者多个扩展点。每个扩展点定义允许访问这个扩展点的一个类和接口。在插件配置文件中，使用<code>&lt;extensions&gt;</code> 和<code>&lt;extensionPoints&gt;</code> 标记插件扩展点。<br>&emsp;&emsp;在<code>&lt;extensionPoints&gt;</code>节点，插入一个子元素<code>&lt;extensionPoint&gt;</code>，使用“name”、“beanClass”和“interface”属性来分别指定扩展点名和允许扩展插件功能的类或接口的名称。<br>①、对于<code>&lt;extensions&gt;</code>元素，设置defaultExtensionNs属性为以下一个值：<br>”com.intellij”，如果你的插件扩展IDEA内核功能点。<code>&lt;ID of a plugin&gt;</code>，如果你的插件扩展另一个插件的功能点。<br>②、向<code>&lt;extensions&gt;</code>元素增加一个新的子元素。 这个子元素名必须匹配扩展要访问的扩展点的名称。<br>③、根据扩展点的类型，你需要做如下中的一件：<br>如果扩展点是使用interface属性声明的，在新增的子元素中，设置implementation属性值为实现指定接口的类的名称。<br>如果扩展点是使用beanClass属性声明的，在新增的子元素中，设置所有有指定的类中被“@Attribute”标注注释的属性。<br>典型的扩展例子，如现在要在IDEA中增加一个浮动面板，那就需要扩展IDEA，插件配置代码片段：<br><img src="1.png"></p><h4 id="插件Action动作"><a href="#插件Action动作" class="headerlink" title="插件Action动作"></a>插件Action动作</h4><p>&emsp;&emsp;插件动作Action，即插件的互交，也就是说，IDEA允许开发插件向IDEA的菜单栏、工具栏增加自己的菜单/工具实现。action 按照组被管理，一个组可以包含其他的组，一组Action可以形成一个工具栏和菜单，组的子组可以构成菜单的子菜单。自定义Action插件类，需要继承抽象类 AnAction， 实现actionPerformed 方法，将在菜单项或者工具栏按钮选中时调用。</p><h4 id="插件服务"><a href="#插件服务" class="headerlink" title="插件服务"></a>插件服务</h4><p>&emsp;&emsp;IntelliJ IDEA提供服务的概念。一个服务是一个在你的插件调用ServiceManager类的getService方法时按需加载的插件组件。即使一个服务被请求多次，IntelliJ IDEA也保证每个服务只有一个实例被加载。一个服务必须在plugin.xml文件中指明接口和实现类。服务的实现类用于服务的实例化。<br>&emsp;&emsp;IntelliJ IDEA提供3类服务：application服务、project服务和module服务。要声明一个服务，你可以使用如下IDEA内核的扩展点：applicationService: 设计用来声明一个application服务；projectService: 设计用来声明一个project服务；moduleService: 设计用来声明一个module服务.<br>&emsp;&emsp;声明一个服务的相关配置：<br>&emsp;&emsp;①、向plugin.xml文件的<code>&lt;extensions&gt;</code>节点添加适当的子元素（<code>&lt;applicationService&gt;、&lt;projectService&gt;</code>或<code>&lt;moduleService&gt;</code>）；<br>&emsp;&emsp;②、在新增的子元素里，设置如下属性： serviceInterface: 指定服务接口类；serviceImplementation: 指定服务实现类。注意接口和实现类可以是同一个类。</p><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>下面列出 插件 hadoop-IntelliJ-Plugin 的配置文件，里面已经注明相关配置的项，可作为参考  </p><div class="hljs code-wrapper"><pre><code>    <figure class="highlight xml"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">idea-plugin</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--插件的ID--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>com.fangyuzhong.intelliJ.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--插件的名称--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>基于IntelliJ IDEA 的Hadoop插件<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--插件的版本--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1000.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--插件的作者描述--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">vendor</span> <span class="hljs-attr">email</span>=<span class="hljs-string">&quot;906328924@qq.com&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;http://www.fangyuzhon.com&quot;</span>&gt;</span>fangyuzhong<span class="hljs-tag">&lt;/<span class="hljs-name">vendor</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--插件描述--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>&lt;![CDATA[<br>      Enter short description for your plugin here.&lt;br&gt;<br>      &lt;em&gt;most HTML tags may be used&lt;/em&gt;<br>    ]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--插件变更相关说明--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">change-notes</span>&gt;</span>&lt;![CDATA[<br>      Add change notes here.&lt;br&gt;<br>      &lt;em&gt;most HTML tags may be used&lt;/em&gt;<br>    ]]&gt;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">change-notes</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--插件编译的IDEA版本--&gt;</span><br>  <span class="hljs-comment">&lt;!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">idea-version</span> <span class="hljs-attr">since-build</span>=<span class="hljs-string">&quot;2017.2.1&quot;</span>/&gt;</span><br>  <span class="hljs-comment">&lt;!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html</span><br><span class="hljs-comment">      on how to target different products --&gt;</span><br>  <span class="hljs-comment">&lt;!-- uncomment to enable plugin in all products</span><br><span class="hljs-comment">  &lt;depends&gt;com.intellij.modules.lang&lt;/depends&gt;</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-comment">&lt;!--Application 级别组件注册--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">application-components</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">implementation-class</span>&gt;</span>com.fangyuzhong.intelliJ.hadoop.fsconnection.ConnectionCache<span class="hljs-tag">&lt;/<span class="hljs-name">implementation-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">implementation-class</span>&gt;</span>com.fangyuzhong.intelliJ.hadoop.options.DefaultProjectSettingsManager<span class="hljs-tag">&lt;/<span class="hljs-name">implementation-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">implementation-class</span>&gt;</span>com.fangyuzhong.intelliJ.hadoop.globalization.LocaleLanguageManager<span class="hljs-tag">&lt;/<span class="hljs-name">implementation-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">application-components</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--Project级别组件注册--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">project-components</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">implementation-class</span>&gt;</span>com.fangyuzhong.intelliJ.hadoop.fsbrowser.FileSystemBrowserManager<span class="hljs-tag">&lt;/<span class="hljs-name">implementation-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">implementation-class</span>&gt;</span>com.fangyuzhong.intelliJ.hadoop.fsconnection.ConnectionManager<span class="hljs-tag">&lt;/<span class="hljs-name">implementation-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">implementation-class</span>&gt;</span>com.fangyuzhong.intelliJ.hadoop.options.ProjectSettingsManager<span class="hljs-tag">&lt;/<span class="hljs-name">implementation-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">project-components</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--插件扩展点--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span> <span class="hljs-attr">defaultExtensionNs</span>=<span class="hljs-string">&quot;com.intellij&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Add your extensions here --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">toolWindow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Hadoop FileSystem&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;/img/hadoop-logo-16x16.png&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">anchor</span>=<span class="hljs-string">&quot;left&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">factoryClass</span>=<span class="hljs-string">&quot;com.fangyuzhong.intelliJ.hadoop.fsbrowser.FileSystemBrowserToolWindowFactory&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">extensions</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--插件的Action--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">actions</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Add your actions here --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">group</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HadoopNavigator.Actions.MainMenu&quot;</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;_Hadoop&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HadoopNavigator.Actions.Browser.ShowHadoopToolWindow&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.fangyuzhong.intelliJ.hadoop.mainmenu.action.ShowHadoopToolWindowAction&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Hadoop 文件系统&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HadoopNavigator.Actions.MainMenu.OpenSettings&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.fangyuzhong.intelliJ.hadoop.mainmenu.action.MenuOpenSettingAction&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Settings&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">separator</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HadoopNavigator.Actions.MainMenu.OpenAbout&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.fangyuzhong.intelliJ.hadoop.mainmenu.action.OpenAboutPageAction&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;About&quot;</span> /&gt;</span><br>      <span class="hljs-comment">&lt;!--&lt;action id=&quot;HadoopNavigator.Actions.MainMenu.TestOpenObject&quot;--&gt;</span><br>              <span class="hljs-comment">&lt;!--class=&quot;com.fangyuzhong.intelliJ.hadoop.mainmenu.action.TestOpenObjectAction&quot;--&gt;</span><br>              <span class="hljs-comment">&lt;!--text=&quot;测试-打开&quot; /&gt;--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">add-to-group</span> <span class="hljs-attr">anchor</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">group-id</span>=<span class="hljs-string">&quot;MainMenu&quot;</span> <span class="hljs-attr">relative-to-action</span>=<span class="hljs-string">&quot;HelpMenu&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">group</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HadoopNavigator.ActionGroup.Browser.Controls&quot;</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Browser object properties&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HadoopNavigator.Actions.Browser.OpenSettings&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.fangyuzhong.intelliJ.hadoop.fsbrowser.action.OpenSettingsAction&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Browser - Options&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">separator</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HadoopNavigator.Actions.Browser.NavigateBack&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.fangyuzhong.intelliJ.hadoop.fsbrowser.action.NavigateBackAction&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Browser - Back&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HadoopNavigator.Actions.Browser.NavigateForward&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.fangyuzhong.intelliJ.hadoop.fsbrowser.action.NavigateForwardAction&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Browser - Forward&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HadoopNavigator.Actions.Browser.ExpandTree&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.fangyuzhong.intelliJ.hadoop.fsbrowser.action.ExpandTreeAction&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Browser - Expand all&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HadoopNavigator.Actions.Browser.CollapseTree&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.fangyuzhong.intelliJ.hadoop.fsbrowser.action.CollapseTreeAction&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Browser - Collapse all&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HadoopNavigator.Actions.Browser.ShowObjectProperties&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.fangyuzhong.intelliJ.hadoop.fsbrowser.action.ShowObjectPropertiesAction&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Browser - Show object properties&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">actions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">idea-plugin</span>&gt;</span><br></code></pre></div></td></tr></table></figure></code></pre>]]></content>
    
    
    <categories>
      
      <category>个人作品</category>
      
      <category>IntelliJ Plugin For Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij Plugin</tag>
      
      <tag>Hadoop</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intellij  Plugin for Hadoop 项目简介</title>
    <link href="/2017/07/25/IntellijPluginHadoop/001-IntellijPluginHadoop/"/>
    <url>/2017/07/25/IntellijPluginHadoop/001-IntellijPluginHadoop/</url>
    
    <content type="html"><![CDATA[<h2 id="Intellij-Plugin-for-Hadoop-项目简介"><a href="#Intellij-Plugin-for-Hadoop-项目简介" class="headerlink" title="Intellij  Plugin for Hadoop 项目简介"></a>Intellij  Plugin for Hadoop 项目简介</h2><p>&emsp;&emsp;最近由于项目从Eclipse的开发环境迁移到 Intellij 开发环境(后续如果没有特殊情况，大致就在Intellij环境下开发了，感觉IntelliJ 还是挺牛逼的，他是所有收费IDE中最好的，而Eclipse是所有开源免费中IDE最好的….)，做Hadoop的相关算法时，找了很久也没找到类似 hadoop-eclipse-plugin 这样的插件，因此就自己琢磨开发了一个进行玩耍。目前可以进行Hadoop文件系统的文件列表展示、进行目录、文件的相关操作，基本功能和hadoop-eclipse-plugin插件类似吧。<br>&emsp;&emsp;Hadoop-Intellij-Plugin 是Intellij IDEA 上的一款插件。实现了在Intellij IDEA 上的Hadoop文件系统的访问和相关操作。该操作包括读取Hadoop文件系统上文件列表进行展示、可以在Hadoop文件系统中创建目录、删除目录；下载或者上传文件；查看文件内容；运行Job作业、支持国际化语言设置等等。类似与 hadoop-eclipse-plugin的插件。<br>&emsp;Intellij-Plugin-Hadoop 的界面大致如下：<br><img src="/img/personalworks_imgs/1.jpg"><br><img src="/img/personalworks_imgs/2.jpg"><br><img src="/img/personalworks_imgs/3.jpg"><br><img src="/img/personalworks_imgs/4.jpg"></p><h2 id="Intellij-Plugin-for-Hadoop-编译和安装"><a href="#Intellij-Plugin-for-Hadoop-编译和安装" class="headerlink" title="Intellij  Plugin for Hadoop 编译和安装"></a>Intellij  Plugin for Hadoop 编译和安装</h2><h3 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h3><p>  从  <a href="https://github.com/fangyuzhong2016/HadoopIntellijPlugin">https://github.com/fangyuzhong2016/HadoopIntellijPlugin</a> 获取最新的源码。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p> ①、目前 Intellij plugin for hadoop 的源码使用maven 进行编译和打包，因此在编译之前请确保安装JDK1.8和 maven3 以上版本<br>②、 Intellij plugin for hadoop 插件基于 IntelliJ IDEA  Ultimate 2017.2 版本进行开发的，因此需要安装  IntelliJ IDEA  Ultimate 2017 以上版本<br>③、准备好Hadoop的相关的jar包（编译步骤不是必须的）<br>④、进入源码目录  ../HadoopIntellijPlugin/修改pom.xml 文件，主要修改hadoop的版本和IntelliJ IDEA 安装的路径，设置如下：<br><img src="/img/personalworks_imgs/5.jpg"><br>⑤、执行mvn 命令：先执行 mvn clean ，然后执行 mvn assembly:assembly   ，编译完成后 在…/target/ HadoopIntellijPlugin-1.0.zip   即为该插件的安装包，然后安装到 IntelliJ 中即可  </p><h3 id="Intellij-plugin-for-hadoop-开发环境设置"><a href="#Intellij-plugin-for-hadoop-开发环境设置" class="headerlink" title="Intellij plugin for hadoop 开发环境设置"></a>Intellij plugin for hadoop 开发环境设置</h3><p>&emsp;&emsp;由于，目前使用Maven 管理Intellij 的插件开发比较困难，因此，如果要使用Intellij 修改 Intellij plugin for hadoop  插件代码，直接基于源码创建Plugin工程是不可以的，需要按照IDEA插件开发的模式进行代码工程的设置。<br>&emsp;&emsp;首先在Intellij IDEA 中创建 一个插件项目，如HadoopIntellijPlugin ，目录组织方式：<br><img src="/img/personalworks_imgs/6.jpg"><br>&emsp;&emsp;然后，把源码目录中的   ../src/main/java/com  文件夹，拷贝到 开发的插件工程 源码 …/src文件夹下，再把  源码目录中的 …./src/main/java/resources  文件夹拷贝到 开发插件工程源码 …./resources  目录下，并且在该目录下，创建lib 文件夹，把Hadoop的相关jar包，拷贝进来。<br>&emsp;&emsp;最后，设置开发的插件工程 HadoopIntellijPlugin配置<br>    ①、设置插件工程扩展的lib，把hadoop 的相关jar 包引入：<br>    <img src="/img/personalworks_imgs/7.jpg"><br>    ②、插件有些UI界面，使用的是IDEA的 GUI Design 进行拖拽设计的，界面元素保存对应类的xml 中，编译过程中使用的是 IDEA的库进行的编译的，并不是 javac 编译器，因此在编译过程中，设置 GUI Designer 的源码生成方式，如果不做这步的设置，在开发环境中进行 debug 运行，没有问题，整个UI界面代码由IDEA框架进行动态生成插入，但打包安装后，会提示界面控件未能实例化。设置 GUI Designer 的源码生成方式，其实就是将那些UI界面的xml 文件生成静态的 Java代码，插入源文件中。在IDEA设置中，进行如下设置：<br>    <img src="/img/personalworks_imgs/8.png"><br>综上所述， Intellij plugin for hadoop 插件的源码编译安装以及完成。  </p><h2 id="Intellij-plugin-for-hadoop-插件配置和源码的相关说明"><a href="#Intellij-plugin-for-hadoop-插件配置和源码的相关说明" class="headerlink" title="Intellij plugin for hadoop 插件配置和源码的相关说明"></a>Intellij plugin for hadoop 插件配置和源码的相关说明</h2><h3 id="插件的源码说明，源码组织如下："><a href="#插件的源码说明，源码组织如下：" class="headerlink" title="插件的源码说明，源码组织如下："></a>插件的源码说明，源码组织如下：</h3><p><img src="/img/personalworks_imgs/9.jpg"><br>①、core 包，为插件项目的核心包，公共组件库，包括了 通用UI界面、多线程操作、Hadoop连接设置基类、Hadoop文件系统通用操作类、插件项目设置通用类和其他工具类<br>②、fsconnection 包，Hadoop文件系统连接实现类和连接相关配置实现类<br>③、fsobject 包，文件系统对象类的实现（对于HDFS来讲就是 目录树和文件树节点的组织方式的实现）<br>④、fsbrowser包，插件的主界面实现，包括读取HDFS文件系统相关数据进行展示、文件系统对象的创建、下载、删除、上传和其他一些操作<br>⑤、globalization包，插件多语言支持类<br>⑥、options 包，插件设置类<br>⑦、mainmenu包， 插件主菜单操作类  </p>]]></content>
    
    
    <categories>
      
      <category>个人作品</category>
      
      <category>IntelliJ Plugin For Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij Plugin</tag>
      
      <tag>Hadoop</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三维数字地球发布平台探索--几款开源软件介绍(转载)</title>
    <link href="/2015/12/29/GIS/GisTheory/002-3DDigitalEarth/"/>
    <url>/2015/12/29/GIS/GisTheory/002-3DDigitalEarth/</url>
    
    <content type="html"><![CDATA[<h1 id="转载的一遍文章，对应的作者找不到了，若有侵权请告之，会删除。个人感觉说得较为中肯。"><a href="#转载的一遍文章，对应的作者找不到了，若有侵权请告之，会删除。个人感觉说得较为中肯。" class="headerlink" title="转载的一遍文章，对应的作者找不到了，若有侵权请告之，会删除。个人感觉说得较为中肯。"></a>转载的一遍文章，对应的作者找不到了，若有侵权请告之，会删除。个人感觉说得较为中肯。</h1><h2 id="WorldWind"><a href="#WorldWind" class="headerlink" title="WorldWind"></a>WorldWind</h2><p>&emsp;&emsp;知名度很高，介绍也很全。链接在这里<a href="https://worldwind.arc.nasa.gov/">NASAWorld Wind</a>目前分为.net版本和java版本。<br>&emsp;&emsp;开发语言:c#.java<br>&emsp;&emsp;渲染方式:DirectX,Opengl(Java)  </p><h3 id="WorldWind的优势"><a href="#WorldWind的优势" class="headerlink" title="WorldWind的优势"></a>WorldWind的优势</h3><p>&emsp;&emsp;WorldWind的软件架构应该来说还是很不错的，很优秀。开放的设计，使得Worldwind的扩展非常方便和快捷，目前已有上百种各式各样的插件，很多插件都很有意思和实用。使用.net和java，研究它的工作原理变的相对容易。<br>&emsp;&emsp;相对来说.net版本的容易深入些。java版的严格面向对象方法的使用，使得java版的精简，但深入起来不如.net容易。以前交流的时候，我经常会推荐WorldWind。很好很强大。<br>这里以.net版进行说明。</p><p>下面的缺陷不能掩盖WorldWind的光彩。      </p><h3 id="WorldWind的缺陷"><a href="#WorldWind的缺陷" class="headerlink" title="WorldWind的缺陷"></a>WorldWind的缺陷</h3><p>总体架构设计没太大问题。主要在内部的几点 </p><h4 id="速度慢。"><a href="#速度慢。" class="headerlink" title="速度慢。"></a>速度慢。</h4><p>几个原因导致worldwind在实际使用中存在速度慢的问题.</p><div class="hljs code-wrapper"><pre><code>    a)影像数据组织混乱。由于worldwind在系统设计时面向的就是各个行业各种数据的集成。因此他设计时的兼容，导致同一地区数据获取重复（占内存资源）、不同数据获取服务器速度不一致影响。    b)c#异常。捕获异常占用了worldwind大部分时间。导致显示、数据获取时严重的停顿。    c)SRTM的动态生成。如果你想像取图工具一样把SRTM下载下来，那简直不可能。    d)QueueDownload实际运作时，一旦出现异常和错误，将导致数据下载停顿。需要重新调整视角。而貌似多线程的下载，实际效果并不明显。这就导致显示出现停顿。</code></pre></div><h4 id="三维支持能力稍差。"><a href="#三维支持能力稍差。" class="headerlink" title="三维支持能力稍差。"></a>三维支持能力稍差。</h4><p> 尤其是在模型的支持方面，虽然有个ModelFeature类来进行三维显示。这里有问题： </p><div class="hljs code-wrapper"><pre><code>    a)不支持LOD，虽然.x文件设计时能支持，不过显然ModelFeature不支持。    b)模型显示漂移。当你放大到最详细时，会发现模型左右上下晃动。    c)模型未按tile形式组织。Cache、内存、释放等方式都存在问题。</code></pre></div><h4 id="矢量支持"><a href="#矢量支持" class="headerlink" title="矢量支持"></a>矢量支持</h4><p>worldwind的矢量处理显示类比较混乱。效果也不是太好。</p><h4 id="KML支持"><a href="#KML支持" class="headerlink" title="KML支持"></a>KML支持</h4><p>通过一个插件能够支持KML,不过想达到googleearth的添加等功能，还需要做很多工作。</p><h4 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h4><p>按理，c#不会存在内存泄露。出现问题的地方是QuadTile.Dispose，D3D的纹理没有进行清除。使得资源占用越来越大，速度越来越慢</p><h4 id="DEM显示缺陷"><a href="#DEM显示缺陷" class="headerlink" title="DEM显示缺陷"></a>DEM显示缺陷</h4><p>每个Tile之间未作平滑处理，经常会出现深坑、断档。</p><h4 id="影像黑边"><a href="#影像黑边" class="headerlink" title="影像黑边"></a>影像黑边</h4><p>大多数基于worldwind的软件，可以看到影像边缘很明显的黑边、锯齿。究其原因，是Jpg压缩，出现黑色渗透交融导致黑边锯齿。 两种解决办法，a)边缘地带采用png。b)严格的数据组织。</p><h3 id="WorldWind的国内应用"><a href="#WorldWind的国内应用" class="headerlink" title="WorldWind的国内应用"></a>WorldWind的国内应用</h3><p>可以说，国内很多高手都解决了上述的问题，并且发扬WorldWind的优势。典型代表EVGlobe等等。很不容易，从某种角度上来说，确实是自主研发。</p><h2 id="OSSIMPlanet"><a href="#OSSIMPlanet" class="headerlink" title="OSSIMPlanet"></a>OSSIMPlanet</h2><h3 id="OSSIMPlanet介绍"><a href="#OSSIMPlanet介绍" class="headerlink" title="OSSIMPlanet介绍"></a>OSSIMPlanet介绍</h3><p>链接：<a href="https://trac.osgeo.org/ossim/wiki/OssimPlanet">ossimplanet</a><br>开发语言:c++<br>渲染方式:opengl<br>相比WorldWind而言，名气并太大。虽然推荐时，我一般不推荐它，但他确实是另外一个很强大的开源数字地球。我不推荐它的原因是：</p><div class="hljs code-wrapper"><pre><code> 1）基于c++。光研究了解它就要花好多成本，这并不太适合国内公司和单位。门槛高，时间长，见效慢。 2）相关资料少。它涉及到太多的大型开源库，而国内翻译的资料相对少很多。不像WorldWind，拿套源代码就能开干。</code></pre></div><p>但我很喜欢它，作为技术人员来说，我推荐大家去看。很多乐趣和知识在里面。很优雅，很内涵，值得收藏。</p><h3 id="OSSIMPlanet优势"><a href="#OSSIMPlanet优势" class="headerlink" title="OSSIMPlanet优势"></a>OSSIMPlanet优势</h3><div class="hljs code-wrapper"><pre><code>1)、基于OSG(Open Scene Graph)，一个很庞大很工业很成熟的开源软件。这点很吸引我。国内很多公司采用，如西安赛能。   地址：www.openscenegraph.org仅OSG就能列出非常多的文章，使用OSG的好处不胜列举。要描述清楚需要花很多篇幅。这里我们就带过。2)、平滑快速高效的显示效果。3)、作为平台来说，他涵盖的内容很全，比如你可以用OSG做出媲美TerraBuilder的软件。用GDAL+OSG支持绝大多数矢量、影像、模型文件。4)、完美的模型支持。不用说LOD,连整个城市装入一点问题没有。在很早以前，有个叫做VTP的虚拟城市开源软件。5)、专业化，确实很专业。6)、脚本支持。通过采用OSG的osgInterper（这部分实在是太美妙了），能快速绑定Python,Lua,JavaScript,Ruby。7)、想了解更多的优势,还是自己去下个来看吧。</code></pre></div><h3 id="OSSIMPlanet缺陷"><a href="#OSSIMPlanet缺陷" class="headerlink" title="OSSIMPlanet缺陷"></a>OSSIMPlanet缺陷</h3><div class="hljs code-wrapper"><pre><code> 从技术角度来讲，OSSIMPlanet的缺陷几乎没有。不过，上面说过了，想基于它形成自己的产品和解决方案，要花很多投入和资金。因此它的硬伤就是，不适合商业化。</code></pre></div><h3 id="OSSIMPlanet国内应用"><a href="#OSSIMPlanet国内应用" class="headerlink" title="OSSIMPlanet国内应用"></a>OSSIMPlanet国内应用</h3><div class="hljs code-wrapper"><pre><code> 几年前，我和一个开发工作室聊过。他们采用的是OSG以及基于OSG开发的数字地球，参考了ossimplanet但未直接使用。因此，国内应用，没有。 这个工作室产品名为VirtualTerran。后来貌似变成了mapok（不确定，知道的请联系我）</code></pre></div><h2 id="Gps3D"><a href="#Gps3D" class="headerlink" title="Gps3D"></a>Gps3D</h2><p>   地址：<a href="http://www.mgix.com/gps3d/">www.mgix.com/gps3d/</a></p><p>   这款开源软件应该来说更侧重于gps功能。当然也包含了三维地球的部分功能。</p><p>   开发语言:c++</p><p>   渲染方式:Opengl<br>   这个开源软件很小巧也很实用。作为技术参考来说，非常不错。可以参考的部分是经纬度转三维坐标，WMS、WFS的远程调用以及Tile的三维显示。</p><p>   缺点就不多说，毕竟方向不一致，不能以平台来要求它。</p><h2 id="Earth3D"><a href="#Earth3D" class="headerlink" title="Earth3D"></a>Earth3D</h2><p>地址：<a href="http://www.earth3d.org/">www.earth3d.org</a></p><p>这款开源软件适合初步研究三维地球。它显示了三维地球，并显示了国界线。</p><p>开发语言:c++</p><p>渲染方式:Opengl</p><p>作为初步研究，还是不错的。毕竟起点的第一步就是如何显示三维地球并贴上MODIS数据。它还能显示国界线。很不错的参考。</p><h2 id="其他更多的开源软件"><a href="#其他更多的开源软件" class="headerlink" title="其他更多的开源软件"></a>其他更多的开源软件</h2><p>目前为止，我发现的开源软件就是以上4种，如果你知道更多，请告诉我。<table><tr><td bgcolor=orange>(转载者： 还有最近的WebGL：Cesium)</td></tr></table></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1.WorldWind最成熟，最适合商业化.</p><p>2.技术最优OSSIMPlanet</p>]]></content>
    
    
    <categories>
      
      <category>GIS</category>
      
      <category>GIS理论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>三维数字地球</tag>
      
      <tag>开源三维</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
